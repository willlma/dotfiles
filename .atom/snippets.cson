# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.text.plain':
  'defsearch':
    'prefix': 'defsearch'
    'body': 'def (self\.)?'

'.source.js.jsx':
  'log value':
    'prefix': 'logv'
    'body': 'console.log(`$1: \${$1}`);$2'

  'log object':
    'prefix': 'logo'
    'body': """
      console.log('$1');
      console.dir($1);$2
    """

  'react reducer':
    'prefix': 'rred'
    'body': """
      export function $1(state$2, action) {
        switch (action.type) {
          case $3;
          default: return state;
        }
      }$4
    """

  'react action creator':
    'prefix': 'rac'
    'body': """
      export const $1 = ($2) => (dispatch, getState) => {
        $3
      };
    """

  'flow action creator':
    'prefix': 'fac'
    'body': """
      export function $1($2) {
        return (dispatch: Function, getState: Function) => {
          $3
        };
      }
    """

  'react prop':
    'prefix': 'rp'
    'body': '$1={$1} $2'

'.source.python':
  'print value':
    'prefix': 'pv'
    'body': 'print "$1 %s" % $1'

'defsearch':
  'prefix': 'defsearch'
  'body': 'def (self\.)?'
