'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _eslintRuleDocumentation = require('eslint-rule-documentation');

var _eslintRuleDocumentation2 = _interopRequireDefault(_eslintRuleDocumentation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Private properties
const rules = Symbol('rules');

/**
 * Stores a list of rules from ESLint
 */
class Rules {
  /**
   * Instantiates a Rules object, optionally with an existing list of rules
   * @param {Array} newRules Array of Arrays of the rule and properties
   */
  constructor(newRules) {
    this.replaceRules(newRules);
  }

  /**
   * Process the updated rules into the local Map and call further update functions
   * @param  {Array} newRules Array of Arrays of the rule and properties
   */
  replaceRules(newRules) {
    this[rules] = new Map(newRules);
  }

  /**
   * [getFixableRules description]
   * @return {Array} The ruleIds of the currently known fixable rules
   */
  getFixableRules() {
    return Array.from(this[rules]).reduce((fixable, [rule, props]) => {
      if (props && props.meta && props.meta.fixable) {
        return [...fixable, rule];
      }
      return fixable;
    }, []);
  }

  /**
   * Get the URL of the documentation for a rule, either from the rule's own
   * metadata, from eslint-rule-documentation's known rules, or the fallback URL
   * on how to add it to eslint-rule-documentation.
   * @param  {String} ruleId The rule ID to get the documentation URL for
   * @return {String}        URL of the rule documentation
   */
  getRuleUrl(ruleId) {
    const props = this[rules].get(ruleId);
    if (props && props.meta && props.meta.docs && props.meta.docs.url) {
      // The rule has a documentation URL specified in its metadata
      return props.meta.docs.url;
    }

    // The rule didn't specify a URL in its metadata, or was not currently known
    // somehow. Attempt to determine a URL using eslint-rule-documentation.
    return (0, _eslintRuleDocumentation2.default)(ruleId).url;
  }

  /**
   * Return the known rules.
   * @return {Map} The currently known rules
   */
  getRules() {
    return new Map(this[rules]);
  }
}
exports.default = Rules;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzLmpzIl0sIm5hbWVzIjpbInJ1bGVzIiwiU3ltYm9sIiwiUnVsZXMiLCJjb25zdHJ1Y3RvciIsIm5ld1J1bGVzIiwicmVwbGFjZVJ1bGVzIiwiTWFwIiwiZ2V0Rml4YWJsZVJ1bGVzIiwiQXJyYXkiLCJmcm9tIiwicmVkdWNlIiwiZml4YWJsZSIsInJ1bGUiLCJwcm9wcyIsIm1ldGEiLCJnZXRSdWxlVXJsIiwicnVsZUlkIiwiZ2V0IiwiZG9jcyIsInVybCIsImdldFJ1bGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0FBRUE7QUFDQSxNQUFNQSxRQUFRQyxPQUFPLE9BQVAsQ0FBZDs7QUFFQTs7O0FBR2UsTUFBTUMsS0FBTixDQUFZO0FBQ3pCOzs7O0FBSUFDLGNBQVlDLFFBQVosRUFBc0I7QUFDcEIsU0FBS0MsWUFBTCxDQUFrQkQsUUFBbEI7QUFDRDs7QUFFRDs7OztBQUlBQyxlQUFhRCxRQUFiLEVBQXVCO0FBQ3JCLFNBQUtKLEtBQUwsSUFBYyxJQUFJTSxHQUFKLENBQVFGLFFBQVIsQ0FBZDtBQUNEOztBQUVEOzs7O0FBSUFHLG9CQUFrQjtBQUNoQixXQUFPQyxNQUFNQyxJQUFOLENBQVcsS0FBS1QsS0FBTCxDQUFYLEVBQXdCVSxNQUF4QixDQUErQixDQUFDQyxPQUFELEVBQVUsQ0FBQ0MsSUFBRCxFQUFPQyxLQUFQLENBQVYsS0FBNEI7QUFDaEUsVUFBSUEsU0FBU0EsTUFBTUMsSUFBZixJQUF1QkQsTUFBTUMsSUFBTixDQUFXSCxPQUF0QyxFQUErQztBQUM3QyxlQUFPLENBQUMsR0FBR0EsT0FBSixFQUFhQyxJQUFiLENBQVA7QUFDRDtBQUNELGFBQU9ELE9BQVA7QUFDRCxLQUxNLEVBS0osRUFMSSxDQUFQO0FBTUQ7O0FBRUQ7Ozs7Ozs7QUFPQUksYUFBV0MsTUFBWCxFQUFtQjtBQUNqQixVQUFNSCxRQUFRLEtBQUtiLEtBQUwsRUFBWWlCLEdBQVosQ0FBZ0JELE1BQWhCLENBQWQ7QUFDQSxRQUFJSCxTQUFTQSxNQUFNQyxJQUFmLElBQXVCRCxNQUFNQyxJQUFOLENBQVdJLElBQWxDLElBQTBDTCxNQUFNQyxJQUFOLENBQVdJLElBQVgsQ0FBZ0JDLEdBQTlELEVBQW1FO0FBQ2pFO0FBQ0EsYUFBT04sTUFBTUMsSUFBTixDQUFXSSxJQUFYLENBQWdCQyxHQUF2QjtBQUNEOztBQUVEO0FBQ0E7QUFDQSxXQUFPLHVDQUFRSCxNQUFSLEVBQWdCRyxHQUF2QjtBQUNEOztBQUVEOzs7O0FBSUFDLGFBQVc7QUFDVCxXQUFPLElBQUlkLEdBQUosQ0FBUSxLQUFLTixLQUFMLENBQVIsQ0FBUDtBQUNEO0FBdkR3QjtrQkFBTkUsSyIsImZpbGUiOiJydWxlcy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvd2lsbC9kb3RmaWxlcy8uYXRvbS9wYWNrYWdlcy9saW50ZXItZXNsaW50L3NyYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBydWxlVVJJIGZyb20gJ2VzbGludC1ydWxlLWRvY3VtZW50YXRpb24nXG5cbi8vIFByaXZhdGUgcHJvcGVydGllc1xuY29uc3QgcnVsZXMgPSBTeW1ib2woJ3J1bGVzJylcblxuLyoqXG4gKiBTdG9yZXMgYSBsaXN0IG9mIHJ1bGVzIGZyb20gRVNMaW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJ1bGVzIHtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIFJ1bGVzIG9iamVjdCwgb3B0aW9uYWxseSB3aXRoIGFuIGV4aXN0aW5nIGxpc3Qgb2YgcnVsZXNcbiAgICogQHBhcmFtIHtBcnJheX0gbmV3UnVsZXMgQXJyYXkgb2YgQXJyYXlzIG9mIHRoZSBydWxlIGFuZCBwcm9wZXJ0aWVzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuZXdSdWxlcykge1xuICAgIHRoaXMucmVwbGFjZVJ1bGVzKG5ld1J1bGVzKVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgdGhlIHVwZGF0ZWQgcnVsZXMgaW50byB0aGUgbG9jYWwgTWFwIGFuZCBjYWxsIGZ1cnRoZXIgdXBkYXRlIGZ1bmN0aW9uc1xuICAgKiBAcGFyYW0gIHtBcnJheX0gbmV3UnVsZXMgQXJyYXkgb2YgQXJyYXlzIG9mIHRoZSBydWxlIGFuZCBwcm9wZXJ0aWVzXG4gICAqL1xuICByZXBsYWNlUnVsZXMobmV3UnVsZXMpIHtcbiAgICB0aGlzW3J1bGVzXSA9IG5ldyBNYXAobmV3UnVsZXMpXG4gIH1cblxuICAvKipcbiAgICogW2dldEZpeGFibGVSdWxlcyBkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiB7QXJyYXl9IFRoZSBydWxlSWRzIG9mIHRoZSBjdXJyZW50bHkga25vd24gZml4YWJsZSBydWxlc1xuICAgKi9cbiAgZ2V0Rml4YWJsZVJ1bGVzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXNbcnVsZXNdKS5yZWR1Y2UoKGZpeGFibGUsIFtydWxlLCBwcm9wc10pID0+IHtcbiAgICAgIGlmIChwcm9wcyAmJiBwcm9wcy5tZXRhICYmIHByb3BzLm1ldGEuZml4YWJsZSkge1xuICAgICAgICByZXR1cm4gWy4uLmZpeGFibGUsIHJ1bGVdXG4gICAgICB9XG4gICAgICByZXR1cm4gZml4YWJsZVxuICAgIH0sIFtdKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgVVJMIG9mIHRoZSBkb2N1bWVudGF0aW9uIGZvciBhIHJ1bGUsIGVpdGhlciBmcm9tIHRoZSBydWxlJ3Mgb3duXG4gICAqIG1ldGFkYXRhLCBmcm9tIGVzbGludC1ydWxlLWRvY3VtZW50YXRpb24ncyBrbm93biBydWxlcywgb3IgdGhlIGZhbGxiYWNrIFVSTFxuICAgKiBvbiBob3cgdG8gYWRkIGl0IHRvIGVzbGludC1ydWxlLWRvY3VtZW50YXRpb24uXG4gICAqIEBwYXJhbSAge1N0cmluZ30gcnVsZUlkIFRoZSBydWxlIElEIHRvIGdldCB0aGUgZG9jdW1lbnRhdGlvbiBVUkwgZm9yXG4gICAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgIFVSTCBvZiB0aGUgcnVsZSBkb2N1bWVudGF0aW9uXG4gICAqL1xuICBnZXRSdWxlVXJsKHJ1bGVJZCkge1xuICAgIGNvbnN0IHByb3BzID0gdGhpc1tydWxlc10uZ2V0KHJ1bGVJZClcbiAgICBpZiAocHJvcHMgJiYgcHJvcHMubWV0YSAmJiBwcm9wcy5tZXRhLmRvY3MgJiYgcHJvcHMubWV0YS5kb2NzLnVybCkge1xuICAgICAgLy8gVGhlIHJ1bGUgaGFzIGEgZG9jdW1lbnRhdGlvbiBVUkwgc3BlY2lmaWVkIGluIGl0cyBtZXRhZGF0YVxuICAgICAgcmV0dXJuIHByb3BzLm1ldGEuZG9jcy51cmxcbiAgICB9XG5cbiAgICAvLyBUaGUgcnVsZSBkaWRuJ3Qgc3BlY2lmeSBhIFVSTCBpbiBpdHMgbWV0YWRhdGEsIG9yIHdhcyBub3QgY3VycmVudGx5IGtub3duXG4gICAgLy8gc29tZWhvdy4gQXR0ZW1wdCB0byBkZXRlcm1pbmUgYSBVUkwgdXNpbmcgZXNsaW50LXJ1bGUtZG9jdW1lbnRhdGlvbi5cbiAgICByZXR1cm4gcnVsZVVSSShydWxlSWQpLnVybFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUga25vd24gcnVsZXMuXG4gICAqIEByZXR1cm4ge01hcH0gVGhlIGN1cnJlbnRseSBrbm93biBydWxlc1xuICAgKi9cbiAgZ2V0UnVsZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXAodGhpc1tydWxlc10pXG4gIH1cbn1cbiJdfQ==