'use strict';
'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rules = undefined;
exports.startWorker = startWorker;
exports.killWorker = killWorker;
exports.sendJob = sendJob;
exports.getDebugInfo = getDebugInfo;
exports.generateDebugString = generateDebugString;
exports.generateUserMessage = generateUserMessage;
exports.handleError = handleError;
exports.processESLintMessages = processESLintMessages;
exports.processJobResponse = processJobResponse;

var _path = require('path');

var _atomLinter = require('atom-linter');

var _cryptoRandomString = require('crypto-random-string');

var _cryptoRandomString2 = _interopRequireDefault(_cryptoRandomString);

var _atom = require('atom');

var _rules = require('./rules');

var _rules2 = _interopRequireDefault(_rules);

var _editor = require('./validate/editor');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rules = exports.rules = new _rules2.default();
// eslint-disable-next-line import/no-extraneous-dependencies, import/extensions

let worker = null;

/**
 * Start the worker process if it hasn't already been started
 */
function startWorker() {
  if (worker === null) {
    worker = new _atom.Task(require.resolve('./worker.js'));
  }

  if (worker.started) {
    // Worker start request has already been sent
    return;
  }
  // Send empty arguments as we don't use them in the worker
  worker.start([]);

  // NOTE: Modifies the Task of the worker, but it's the only clean way to track this
  worker.started = true;
}

/**
 * Forces the worker Task to kill itself
 */
function killWorker() {
  if (worker !== null) {
    worker.terminate();
    worker = null;
  }
}

/**
 * Send a job to the worker and return the results
 * @param  {Object} config Configuration for the job to send to the worker
 * @return {Object|String|Error}        The data returned from the worker
 */
async function sendJob(config) {
  if (worker && !worker.childProcess.connected) {
    // Sometimes the worker dies and becomes disconnected
    // When that happens, it seems that there is no way to recover other
    // than to kill the worker and create a new one.
    killWorker();
  }

  // Ensure the worker is started
  startWorker();

  // Expand the config with a unique ID to emit on
  // NOTE: Jobs _must_ have a unique ID as they are completely async and results
  // can arrive back in any order.
  // eslint-disable-next-line no-param-reassign
  config.emitKey = (0, _cryptoRandomString2.default)(10);

  return new Promise((resolve, reject) => {
    // All worker errors are caught and re-emitted along with their associated
    // emitKey, so that we do not create multiple listeners for the same
    // 'task:error' event
    const errSub = worker.on(`workerError:${config.emitKey}`, ({ msg, stack }) => {
      // Re-throw errors from the task
      const error = new Error(msg);
      // Set the stack to the one given to us by the worker
      error.stack = stack;
      errSub.dispose();
      // eslint-disable-next-line no-use-before-define
      responseSub.dispose();
      reject(error);
    });
    const responseSub = worker.on(config.emitKey, data => {
      errSub.dispose();
      responseSub.dispose();
      resolve(data);
    });
    // Send the job on to the worker
    try {
      worker.send(config);
    } catch (e) {
      errSub.dispose();
      responseSub.dispose();
      console.error(e);
    }
  });
}

async function getDebugInfo() {
  const textEditor = atom.workspace.getActiveTextEditor();
  let filePath;
  let editorScopes;
  if (atom.workspace.isTextEditor(textEditor)) {
    filePath = textEditor.getPath();
    editorScopes = textEditor.getLastCursor().getScopeDescriptor().getScopesArray();
  } else {
    // Somehow this can be called with no active TextEditor, impossible I know...
    filePath = 'unknown';
    editorScopes = ['unknown'];
  }
  const packagePath = atom.packages.resolvePackagePath('linter-eslint');
  let linterEslintMeta;
  if (packagePath === undefined) {
    // Apparently for some users the package path fails to resolve
    linterEslintMeta = { version: 'unknown!' };
  } else {
    // eslint-disable-next-line import/no-dynamic-require
    linterEslintMeta = require((0, _path.join)(packagePath, 'package.json'));
  }
  const config = atom.config.get('linter-eslint');
  const hoursSinceRestart = Math.round(process.uptime() / 3600 * 10) / 10;
  let returnVal;
  try {
    const response = await sendJob({
      type: 'debug',
      config,
      filePath
    });
    returnVal = {
      atomVersion: atom.getVersion(),
      linterEslintVersion: linterEslintMeta.version,
      linterEslintConfig: config,
      // eslint-disable-next-line import/no-dynamic-require
      eslintVersion: require((0, _path.join)(response.path, 'package.json')).version,
      hoursSinceRestart,
      platform: process.platform,
      eslintType: response.type,
      eslintPath: response.path,
      editorScopes
    };
  } catch (error) {
    atom.notifications.addError(`${error}`);
  }
  return returnVal;
}

async function generateDebugString() {
  const debug = await getDebugInfo();
  const details = [`Atom version: ${debug.atomVersion}`, `linter-eslint version: ${debug.linterEslintVersion}`, `ESLint version: ${debug.eslintVersion}`, `Hours since last Atom restart: ${debug.hoursSinceRestart}`, `Platform: ${debug.platform}`, `Using ${debug.eslintType} ESLint from: ${debug.eslintPath}`, `Current file's scopes: ${JSON.stringify(debug.editorScopes, null, 2)}`, `linter-eslint configuration: ${JSON.stringify(debug.linterEslintConfig, null, 2)}`];
  return details.join('\n');
}

/**
 * Turn the given options into a Linter message array
 * @param  {TextEditor} textEditor The TextEditor to use to build the message
 * @param  {Object} options    The parameters used to fill in the message
 * @param  {string} [options.severity='error'] Can be one of: 'error', 'warning', 'info'
 * @param  {string} [options.excerpt=''] Short text to use in the message
 * @param  {string|Function} [options.description] Used to provide additional information
 * @return {Array}            Message to user generated from the parameters
 */
function generateUserMessage(textEditor, options) {
  const {
    severity = 'error',
    excerpt = '',
    description
  } = options;
  return [{
    severity,
    excerpt,
    description,
    location: {
      file: textEditor.getPath(),
      position: (0, _atomLinter.generateRange)(textEditor)
    }
  }];
}

/**
 * Generates a message to the user in order to nicely display the Error being
 * thrown instead of depending on generic error handling.
 * @param  {TextEditor} textEditor The TextEditor to use to build the message
 * @param  {Error} error      Error to generate a message for
 * @return {Array}            Message to user generated from the Error
 */
function handleError(textEditor, error) {
  const { stack, message } = error;
  // Only show the first line of the message as the excerpt
  const excerpt = `Error while running ESLint: ${message.split('\n')[0]}.`;
  const description = `<div style="white-space: pre-wrap">${message}\n<hr />${stack}</div>`;
  return generateUserMessage(textEditor, { severity: 'error', excerpt, description });
}

const generateInvalidTrace = async ({
  msgLine, msgCol, msgEndLine, msgEndCol,
  eslintFullRange, filePath, textEditor, ruleId, message
}) => {
  let errMsgRange = `${msgLine + 1}:${msgCol}`;
  if (eslintFullRange) {
    errMsgRange += ` - ${msgEndLine + 1}:${msgEndCol + 1}`;
  }
  const rangeText = `Requested ${eslintFullRange ? 'start point' : 'range'}: ${errMsgRange}`;
  const issueURL = 'https://github.com/AtomLinter/linter-eslint/issues/new';
  const titleText = `Invalid position given by '${ruleId}'`;
  const title = encodeURIComponent(titleText);
  const body = encodeURIComponent(['ESLint returned a point that did not exist in the document being edited.', `Rule: \`${ruleId}\``, rangeText, '', '', '<!-- If at all possible, please include code to reproduce this issue! -->', '', '', 'Debug information:', '```json', JSON.stringify((await getDebugInfo()), null, 2), '```'].join('\n'));

  const location = {
    file: filePath,
    position: (0, _atomLinter.generateRange)(textEditor, 0)
  };
  const newIssueURL = `${issueURL}?title=${title}&body=${body}`;

  return {
    severity: 'error',
    excerpt: `${titleText}. See the description for details. ` + 'Click the URL to open a new issue!',
    url: newIssueURL,
    location,
    description: `${rangeText}\nOriginal message: ${message}`
  };
};

/**
 * Given a raw response from ESLint, this processes the messages into a format
 * compatible with the Linter API.
 * @param  {Object}     messages   The messages from ESLint's response
 * @param  {TextEditor} textEditor The Atom::TextEditor of the file the messages belong to
 * @param  {bool}       showRule   Whether to show the rule in the messages
 * @return {Promise}               The messages transformed into Linter messages
 */
async function processESLintMessages(messages, textEditor, showRule) {
  return Promise.all(messages.map(async ({
    fatal, message: originalMessage, line, severity, ruleId, column, fix, endLine, endColumn
  }) => {
    const message = fatal ? originalMessage.split('\n')[0] : originalMessage;
    const filePath = textEditor.getPath();
    const textBuffer = textEditor.getBuffer();
    let linterFix = null;
    if (fix) {
      const fixRange = new _atom.Range(textBuffer.positionForCharacterIndex(fix.range[0]), textBuffer.positionForCharacterIndex(fix.range[1]));
      linterFix = {
        position: fixRange,
        replaceWith: fix.text
      };
    }
    let msgCol;
    let msgEndLine;
    let msgEndCol;
    let eslintFullRange = false;

    /*
     Note: ESLint positions are 1-indexed, while Atom expects 0-indexed,
     positions. We are subtracting 1 from these values here so we don't have to
     keep doing so in later uses.
     */
    const msgLine = line - 1;
    if (typeof endColumn !== 'undefined' && typeof endLine !== 'undefined') {
      eslintFullRange = true;
      // Here we always want the column to be a number
      msgCol = Math.max(0, column - 1);
      msgEndLine = endLine - 1;
      msgEndCol = endColumn - 1;
    } else {
      // We want msgCol to remain undefined if it was initially so
      // `generateRange` will give us a range over the entire line
      msgCol = typeof column !== 'undefined' ? column - 1 : column;
    }

    let ret = {
      severity: severity === 1 ? 'warning' : 'error',
      location: {
        file: filePath
      }
    };

    if (ruleId) {
      ret.url = rules.getRuleUrl(ruleId);
    }

    let range;
    try {
      if (eslintFullRange) {
        const buffer = textEditor.getBuffer();
        (0, _editor.throwIfInvalidPoint)(buffer, msgLine, msgCol);
        (0, _editor.throwIfInvalidPoint)(buffer, msgEndLine, msgEndCol);
        range = [[msgLine, msgCol], [msgEndLine, msgEndCol]];
      } else {
        range = (0, _atomLinter.generateRange)(textEditor, msgLine, msgCol);
      }
      ret.location.position = range;

      const ruleAppendix = showRule ? ` (${ruleId || 'Fatal'})` : '';
      ret.excerpt = `${message}${ruleAppendix}`;

      if (linterFix) {
        ret.solutions = [linterFix];
      }
    } catch (err) {
      ret = await generateInvalidTrace({
        msgLine,
        msgCol,
        msgEndLine,
        msgEndCol,
        eslintFullRange,
        filePath,
        textEditor,
        ruleId,
        message
      });
    }

    return ret;
  }));
}

/**
 * Processes the response from the lint job
 * @param  {Object}     response   The raw response from the job
 * @param  {TextEditor} textEditor The Atom::TextEditor of the file the messages belong to
 * @param  {bool}       showRule   Whether to show the rule in the messages
 * @return {Promise}               The messages transformed into Linter messages
 */
async function processJobResponse(response, textEditor, showRule) {
  if (Object.prototype.hasOwnProperty.call(response, 'updatedRules')) {
    rules.replaceRules(response.updatedRules);
  }
  return processESLintMessages(response.messages, textEditor, showRule);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsic3RhcnRXb3JrZXIiLCJraWxsV29ya2VyIiwic2VuZEpvYiIsImdldERlYnVnSW5mbyIsImdlbmVyYXRlRGVidWdTdHJpbmciLCJnZW5lcmF0ZVVzZXJNZXNzYWdlIiwiaGFuZGxlRXJyb3IiLCJwcm9jZXNzRVNMaW50TWVzc2FnZXMiLCJwcm9jZXNzSm9iUmVzcG9uc2UiLCJydWxlcyIsIlJ1bGVzIiwid29ya2VyIiwiVGFzayIsInJlcXVpcmUiLCJyZXNvbHZlIiwic3RhcnRlZCIsInN0YXJ0IiwidGVybWluYXRlIiwiY29uZmlnIiwiY2hpbGRQcm9jZXNzIiwiY29ubmVjdGVkIiwiZW1pdEtleSIsIlByb21pc2UiLCJyZWplY3QiLCJlcnJTdWIiLCJvbiIsIm1zZyIsInN0YWNrIiwiZXJyb3IiLCJFcnJvciIsImRpc3Bvc2UiLCJyZXNwb25zZVN1YiIsImRhdGEiLCJzZW5kIiwiZSIsImNvbnNvbGUiLCJ0ZXh0RWRpdG9yIiwiYXRvbSIsIndvcmtzcGFjZSIsImdldEFjdGl2ZVRleHRFZGl0b3IiLCJmaWxlUGF0aCIsImVkaXRvclNjb3BlcyIsImlzVGV4dEVkaXRvciIsImdldFBhdGgiLCJnZXRMYXN0Q3Vyc29yIiwiZ2V0U2NvcGVEZXNjcmlwdG9yIiwiZ2V0U2NvcGVzQXJyYXkiLCJwYWNrYWdlUGF0aCIsInBhY2thZ2VzIiwicmVzb2x2ZVBhY2thZ2VQYXRoIiwibGludGVyRXNsaW50TWV0YSIsInVuZGVmaW5lZCIsInZlcnNpb24iLCJnZXQiLCJob3Vyc1NpbmNlUmVzdGFydCIsIk1hdGgiLCJyb3VuZCIsInByb2Nlc3MiLCJ1cHRpbWUiLCJyZXR1cm5WYWwiLCJyZXNwb25zZSIsInR5cGUiLCJhdG9tVmVyc2lvbiIsImdldFZlcnNpb24iLCJsaW50ZXJFc2xpbnRWZXJzaW9uIiwibGludGVyRXNsaW50Q29uZmlnIiwiZXNsaW50VmVyc2lvbiIsInBhdGgiLCJwbGF0Zm9ybSIsImVzbGludFR5cGUiLCJlc2xpbnRQYXRoIiwibm90aWZpY2F0aW9ucyIsImFkZEVycm9yIiwiZGVidWciLCJkZXRhaWxzIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJvcHRpb25zIiwic2V2ZXJpdHkiLCJleGNlcnB0IiwiZGVzY3JpcHRpb24iLCJsb2NhdGlvbiIsImZpbGUiLCJwb3NpdGlvbiIsIm1lc3NhZ2UiLCJzcGxpdCIsImdlbmVyYXRlSW52YWxpZFRyYWNlIiwibXNnTGluZSIsIm1zZ0NvbCIsIm1zZ0VuZExpbmUiLCJtc2dFbmRDb2wiLCJlc2xpbnRGdWxsUmFuZ2UiLCJydWxlSWQiLCJlcnJNc2dSYW5nZSIsInJhbmdlVGV4dCIsImlzc3VlVVJMIiwidGl0bGVUZXh0IiwidGl0bGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJib2R5IiwibmV3SXNzdWVVUkwiLCJ1cmwiLCJtZXNzYWdlcyIsInNob3dSdWxlIiwiYWxsIiwibWFwIiwiZmF0YWwiLCJvcmlnaW5hbE1lc3NhZ2UiLCJsaW5lIiwiY29sdW1uIiwiZml4IiwiZW5kTGluZSIsImVuZENvbHVtbiIsInRleHRCdWZmZXIiLCJnZXRCdWZmZXIiLCJsaW50ZXJGaXgiLCJmaXhSYW5nZSIsIlJhbmdlIiwicG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleCIsInJhbmdlIiwicmVwbGFjZVdpdGgiLCJ0ZXh0IiwibWF4IiwicmV0IiwiZ2V0UnVsZVVybCIsImJ1ZmZlciIsInJ1bGVBcHBlbmRpeCIsInNvbHV0aW9ucyIsImVyciIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInJlcGxhY2VSdWxlcyIsInVwZGF0ZWRSdWxlcyJdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7UUFnQmdCQSxXLEdBQUFBLFc7UUFtQkFDLFUsR0FBQUEsVTtRQVlNQyxPLEdBQUFBLE87UUErQ0FDLFksR0FBQUEsWTtRQWdEQUMsbUIsR0FBQUEsbUI7UUF3Qk5DLG1CLEdBQUFBLG1CO1FBd0JBQyxXLEdBQUFBLFc7UUF5RE1DLHFCLEdBQUFBLHFCO1FB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RUssT0FBUSxHQUFFMEMsWUFBYSxFQUF4Qzs7QUFFQSxVQUFJWCxTQUFKLEVBQWU7QUFDYlEsWUFBSUksU0FBSixHQUFnQixDQUFDWixTQUFELENBQWhCO0FBQ0Q7QUFDRixLQWpCRCxDQWlCRSxPQUFPYSxHQUFQLEVBQVk7QUFDWkwsWUFBTSxNQUFNckMscUJBQXFCO0FBQy9CQyxlQUQrQjtBQUUvQkMsY0FGK0I7QUFHL0JDLGtCQUgrQjtBQUkvQkMsaUJBSitCO0FBSy9CQyx1QkFMK0I7QUFNL0JwRCxnQkFOK0I7QUFPL0JKLGtCQVArQjtBQVEvQnlELGNBUitCO0FBUy9CUjtBQVQrQixPQUFyQixDQUFaO0FBV0Q7O0FBRUQsV0FBT3VDLEdBQVA7QUFDRCxHQXBGa0IsQ0FBWixDQUFQO0FBcUZEOztBQUVEOzs7Ozs7O0FBT08sZUFBZXBILGtCQUFmLENBQWtDb0QsUUFBbEMsRUFBNEN4QixVQUE1QyxFQUF3RG9FLFFBQXhELEVBQWtFO0FBQ3ZFLE1BQUkwQixPQUFPQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUN6RSxRQUFyQyxFQUErQyxjQUEvQyxDQUFKLEVBQW9FO0FBQ2xFbkQsVUFBTTZILFlBQU4sQ0FBbUIxRSxTQUFTMkUsWUFBNUI7QUFDRDtBQUNELFNBQU9oSSxzQkFBc0JxRCxTQUFTMkMsUUFBL0IsRUFBeUNuRSxVQUF6QyxFQUFxRG9FLFFBQXJELENBQVA7QUFDRCIsImZpbGUiOiJoZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy93aWxsL2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1lc2xpbnQvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBnZW5lcmF0ZVJhbmdlIH0gZnJvbSAnYXRvbS1saW50ZXInXG5pbXBvcnQgY3J5cHRvUmFuZG9tU3RyaW5nIGZyb20gJ2NyeXB0by1yYW5kb20tc3RyaW5nJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcywgaW1wb3J0L2V4dGVuc2lvbnNcbmltcG9ydCB7IFJhbmdlLCBUYXNrIH0gZnJvbSAnYXRvbSdcbmltcG9ydCBSdWxlcyBmcm9tICcuL3J1bGVzJ1xuaW1wb3J0IHsgdGhyb3dJZkludmFsaWRQb2ludCB9IGZyb20gJy4vdmFsaWRhdGUvZWRpdG9yJ1xuXG5leHBvcnQgY29uc3QgcnVsZXMgPSBuZXcgUnVsZXMoKVxubGV0IHdvcmtlciA9IG51bGxcblxuLyoqXG4gKiBTdGFydCB0aGUgd29ya2VyIHByb2Nlc3MgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlbiBzdGFydGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdvcmtlcigpIHtcbiAgaWYgKHdvcmtlciA9PT0gbnVsbCkge1xuICAgIHdvcmtlciA9IG5ldyBUYXNrKHJlcXVpcmUucmVzb2x2ZSgnLi93b3JrZXIuanMnKSlcbiAgfVxuXG4gIGlmICh3b3JrZXIuc3RhcnRlZCkge1xuICAgIC8vIFdvcmtlciBzdGFydCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudFxuICAgIHJldHVyblxuICB9XG4gIC8vIFNlbmQgZW1wdHkgYXJndW1lbnRzIGFzIHdlIGRvbid0IHVzZSB0aGVtIGluIHRoZSB3b3JrZXJcbiAgd29ya2VyLnN0YXJ0KFtdKVxuXG4gIC8vIE5PVEU6IE1vZGlmaWVzIHRoZSBUYXNrIG9mIHRoZSB3b3JrZXIsIGJ1dCBpdCdzIHRoZSBvbmx5IGNsZWFuIHdheSB0byB0cmFjayB0aGlzXG4gIHdvcmtlci5zdGFydGVkID0gdHJ1ZVxufVxuXG4vKipcbiAqIEZvcmNlcyB0aGUgd29ya2VyIFRhc2sgdG8ga2lsbCBpdHNlbGZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGtpbGxXb3JrZXIoKSB7XG4gIGlmICh3b3JrZXIgIT09IG51bGwpIHtcbiAgICB3b3JrZXIudGVybWluYXRlKClcbiAgICB3b3JrZXIgPSBudWxsXG4gIH1cbn1cblxuLyoqXG4gKiBTZW5kIGEgam9iIHRvIHRoZSB3b3JrZXIgYW5kIHJldHVybiB0aGUgcmVzdWx0c1xuICogQHBhcmFtICB7T2JqZWN0fSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgdGhlIGpvYiB0byBzZW5kIHRvIHRoZSB3b3JrZXJcbiAqIEByZXR1cm4ge09iamVjdHxTdHJpbmd8RXJyb3J9ICAgICAgICBUaGUgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSB3b3JrZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRKb2IoY29uZmlnKSB7XG4gIGlmICh3b3JrZXIgJiYgIXdvcmtlci5jaGlsZFByb2Nlc3MuY29ubmVjdGVkKSB7XG4gICAgLy8gU29tZXRpbWVzIHRoZSB3b3JrZXIgZGllcyBhbmQgYmVjb21lcyBkaXNjb25uZWN0ZWRcbiAgICAvLyBXaGVuIHRoYXQgaGFwcGVucywgaXQgc2VlbXMgdGhhdCB0aGVyZSBpcyBubyB3YXkgdG8gcmVjb3ZlciBvdGhlclxuICAgIC8vIHRoYW4gdG8ga2lsbCB0aGUgd29ya2VyIGFuZCBjcmVhdGUgYSBuZXcgb25lLlxuICAgIGtpbGxXb3JrZXIoKVxuICB9XG5cbiAgLy8gRW5zdXJlIHRoZSB3b3JrZXIgaXMgc3RhcnRlZFxuICBzdGFydFdvcmtlcigpXG5cbiAgLy8gRXhwYW5kIHRoZSBjb25maWcgd2l0aCBhIHVuaXF1ZSBJRCB0byBlbWl0IG9uXG4gIC8vIE5PVEU6IEpvYnMgX211c3RfIGhhdmUgYSB1bmlxdWUgSUQgYXMgdGhleSBhcmUgY29tcGxldGVseSBhc3luYyBhbmQgcmVzdWx0c1xuICAvLyBjYW4gYXJyaXZlIGJhY2sgaW4gYW55IG9yZGVyLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnLmVtaXRLZXkgPSBjcnlwdG9SYW5kb21TdHJpbmcoMTApXG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyBBbGwgd29ya2VyIGVycm9ycyBhcmUgY2F1Z2h0IGFuZCByZS1lbWl0dGVkIGFsb25nIHdpdGggdGhlaXIgYXNzb2NpYXRlZFxuICAgIC8vIGVtaXRLZXksIHNvIHRoYXQgd2UgZG8gbm90IGNyZWF0ZSBtdWx0aXBsZSBsaXN0ZW5lcnMgZm9yIHRoZSBzYW1lXG4gICAgLy8gJ3Rhc2s6ZXJyb3InIGV2ZW50XG4gICAgY29uc3QgZXJyU3ViID0gd29ya2VyLm9uKGB3b3JrZXJFcnJvcjoke2NvbmZpZy5lbWl0S2V5fWAsICh7IG1zZywgc3RhY2sgfSkgPT4ge1xuICAgICAgLy8gUmUtdGhyb3cgZXJyb3JzIGZyb20gdGhlIHRhc2tcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1zZylcbiAgICAgIC8vIFNldCB0aGUgc3RhY2sgdG8gdGhlIG9uZSBnaXZlbiB0byB1cyBieSB0aGUgd29ya2VyXG4gICAgICBlcnJvci5zdGFjayA9IHN0YWNrXG4gICAgICBlcnJTdWIuZGlzcG9zZSgpXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgIHJlc3BvbnNlU3ViLmRpc3Bvc2UoKVxuICAgICAgcmVqZWN0KGVycm9yKVxuICAgIH0pXG4gICAgY29uc3QgcmVzcG9uc2VTdWIgPSB3b3JrZXIub24oY29uZmlnLmVtaXRLZXksIChkYXRhKSA9PiB7XG4gICAgICBlcnJTdWIuZGlzcG9zZSgpXG4gICAgICByZXNwb25zZVN1Yi5kaXNwb3NlKClcbiAgICAgIHJlc29sdmUoZGF0YSlcbiAgICB9KVxuICAgIC8vIFNlbmQgdGhlIGpvYiBvbiB0byB0aGUgd29ya2VyXG4gICAgdHJ5IHtcbiAgICAgIHdvcmtlci5zZW5kKGNvbmZpZylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJTdWIuZGlzcG9zZSgpXG4gICAgICByZXNwb25zZVN1Yi5kaXNwb3NlKClcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSlcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREZWJ1Z0luZm8oKSB7XG4gIGNvbnN0IHRleHRFZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgbGV0IGZpbGVQYXRoXG4gIGxldCBlZGl0b3JTY29wZXNcbiAgaWYgKGF0b20ud29ya3NwYWNlLmlzVGV4dEVkaXRvcih0ZXh0RWRpdG9yKSkge1xuICAgIGZpbGVQYXRoID0gdGV4dEVkaXRvci5nZXRQYXRoKClcbiAgICBlZGl0b3JTY29wZXMgPSB0ZXh0RWRpdG9yLmdldExhc3RDdXJzb3IoKS5nZXRTY29wZURlc2NyaXB0b3IoKS5nZXRTY29wZXNBcnJheSgpXG4gIH0gZWxzZSB7XG4gICAgLy8gU29tZWhvdyB0aGlzIGNhbiBiZSBjYWxsZWQgd2l0aCBubyBhY3RpdmUgVGV4dEVkaXRvciwgaW1wb3NzaWJsZSBJIGtub3cuLi5cbiAgICBmaWxlUGF0aCA9ICd1bmtub3duJ1xuICAgIGVkaXRvclNjb3BlcyA9IFsndW5rbm93biddXG4gIH1cbiAgY29uc3QgcGFja2FnZVBhdGggPSBhdG9tLnBhY2thZ2VzLnJlc29sdmVQYWNrYWdlUGF0aCgnbGludGVyLWVzbGludCcpXG4gIGxldCBsaW50ZXJFc2xpbnRNZXRhXG4gIGlmIChwYWNrYWdlUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gQXBwYXJlbnRseSBmb3Igc29tZSB1c2VycyB0aGUgcGFja2FnZSBwYXRoIGZhaWxzIHRvIHJlc29sdmVcbiAgICBsaW50ZXJFc2xpbnRNZXRhID0geyB2ZXJzaW9uOiAndW5rbm93biEnIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZVxuICAgIGxpbnRlckVzbGludE1ldGEgPSByZXF1aXJlKGpvaW4ocGFja2FnZVBhdGgsICdwYWNrYWdlLmpzb24nKSlcbiAgfVxuICBjb25zdCBjb25maWcgPSBhdG9tLmNvbmZpZy5nZXQoJ2xpbnRlci1lc2xpbnQnKVxuICBjb25zdCBob3Vyc1NpbmNlUmVzdGFydCA9IE1hdGgucm91bmQoKHByb2Nlc3MudXB0aW1lKCkgLyAzNjAwKSAqIDEwKSAvIDEwXG4gIGxldCByZXR1cm5WYWxcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNlbmRKb2Ioe1xuICAgICAgdHlwZTogJ2RlYnVnJyxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGZpbGVQYXRoXG4gICAgfSlcbiAgICByZXR1cm5WYWwgPSB7XG4gICAgICBhdG9tVmVyc2lvbjogYXRvbS5nZXRWZXJzaW9uKCksXG4gICAgICBsaW50ZXJFc2xpbnRWZXJzaW9uOiBsaW50ZXJFc2xpbnRNZXRhLnZlcnNpb24sXG4gICAgICBsaW50ZXJFc2xpbnRDb25maWc6IGNvbmZpZyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlXG4gICAgICBlc2xpbnRWZXJzaW9uOiByZXF1aXJlKGpvaW4ocmVzcG9uc2UucGF0aCwgJ3BhY2thZ2UuanNvbicpKS52ZXJzaW9uLFxuICAgICAgaG91cnNTaW5jZVJlc3RhcnQsXG4gICAgICBwbGF0Zm9ybTogcHJvY2Vzcy5wbGF0Zm9ybSxcbiAgICAgIGVzbGludFR5cGU6IHJlc3BvbnNlLnR5cGUsXG4gICAgICBlc2xpbnRQYXRoOiByZXNwb25zZS5wYXRoLFxuICAgICAgZWRpdG9yU2NvcGVzLFxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoYCR7ZXJyb3J9YClcbiAgfVxuICByZXR1cm4gcmV0dXJuVmFsXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZURlYnVnU3RyaW5nKCkge1xuICBjb25zdCBkZWJ1ZyA9IGF3YWl0IGdldERlYnVnSW5mbygpXG4gIGNvbnN0IGRldGFpbHMgPSBbXG4gICAgYEF0b20gdmVyc2lvbjogJHtkZWJ1Zy5hdG9tVmVyc2lvbn1gLFxuICAgIGBsaW50ZXItZXNsaW50IHZlcnNpb246ICR7ZGVidWcubGludGVyRXNsaW50VmVyc2lvbn1gLFxuICAgIGBFU0xpbnQgdmVyc2lvbjogJHtkZWJ1Zy5lc2xpbnRWZXJzaW9ufWAsXG4gICAgYEhvdXJzIHNpbmNlIGxhc3QgQXRvbSByZXN0YXJ0OiAke2RlYnVnLmhvdXJzU2luY2VSZXN0YXJ0fWAsXG4gICAgYFBsYXRmb3JtOiAke2RlYnVnLnBsYXRmb3JtfWAsXG4gICAgYFVzaW5nICR7ZGVidWcuZXNsaW50VHlwZX0gRVNMaW50IGZyb206ICR7ZGVidWcuZXNsaW50UGF0aH1gLFxuICAgIGBDdXJyZW50IGZpbGUncyBzY29wZXM6ICR7SlNPTi5zdHJpbmdpZnkoZGVidWcuZWRpdG9yU2NvcGVzLCBudWxsLCAyKX1gLFxuICAgIGBsaW50ZXItZXNsaW50IGNvbmZpZ3VyYXRpb246ICR7SlNPTi5zdHJpbmdpZnkoZGVidWcubGludGVyRXNsaW50Q29uZmlnLCBudWxsLCAyKX1gXG4gIF1cbiAgcmV0dXJuIGRldGFpbHMuam9pbignXFxuJylcbn1cblxuLyoqXG4gKiBUdXJuIHRoZSBnaXZlbiBvcHRpb25zIGludG8gYSBMaW50ZXIgbWVzc2FnZSBhcnJheVxuICogQHBhcmFtICB7VGV4dEVkaXRvcn0gdGV4dEVkaXRvciBUaGUgVGV4dEVkaXRvciB0byB1c2UgdG8gYnVpbGQgdGhlIG1lc3NhZ2VcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyAgICBUaGUgcGFyYW1ldGVycyB1c2VkIHRvIGZpbGwgaW4gdGhlIG1lc3NhZ2VcbiAqIEBwYXJhbSAge3N0cmluZ30gW29wdGlvbnMuc2V2ZXJpdHk9J2Vycm9yJ10gQ2FuIGJlIG9uZSBvZjogJ2Vycm9yJywgJ3dhcm5pbmcnLCAnaW5mbydcbiAqIEBwYXJhbSAge3N0cmluZ30gW29wdGlvbnMuZXhjZXJwdD0nJ10gU2hvcnQgdGV4dCB0byB1c2UgaW4gdGhlIG1lc3NhZ2VcbiAqIEBwYXJhbSAge3N0cmluZ3xGdW5jdGlvbn0gW29wdGlvbnMuZGVzY3JpcHRpb25dIFVzZWQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgICBNZXNzYWdlIHRvIHVzZXIgZ2VuZXJhdGVkIGZyb20gdGhlIHBhcmFtZXRlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVXNlck1lc3NhZ2UodGV4dEVkaXRvciwgb3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgc2V2ZXJpdHkgPSAnZXJyb3InLFxuICAgIGV4Y2VycHQgPSAnJyxcbiAgICBkZXNjcmlwdGlvbixcbiAgfSA9IG9wdGlvbnNcbiAgcmV0dXJuIFt7XG4gICAgc2V2ZXJpdHksXG4gICAgZXhjZXJwdCxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBsb2NhdGlvbjoge1xuICAgICAgZmlsZTogdGV4dEVkaXRvci5nZXRQYXRoKCksXG4gICAgICBwb3NpdGlvbjogZ2VuZXJhdGVSYW5nZSh0ZXh0RWRpdG9yKSxcbiAgICB9LFxuICB9XVxufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG1lc3NhZ2UgdG8gdGhlIHVzZXIgaW4gb3JkZXIgdG8gbmljZWx5IGRpc3BsYXkgdGhlIEVycm9yIGJlaW5nXG4gKiB0aHJvd24gaW5zdGVhZCBvZiBkZXBlbmRpbmcgb24gZ2VuZXJpYyBlcnJvciBoYW5kbGluZy5cbiAqIEBwYXJhbSAge1RleHRFZGl0b3J9IHRleHRFZGl0b3IgVGhlIFRleHRFZGl0b3IgdG8gdXNlIHRvIGJ1aWxkIHRoZSBtZXNzYWdlXG4gKiBAcGFyYW0gIHtFcnJvcn0gZXJyb3IgICAgICBFcnJvciB0byBnZW5lcmF0ZSBhIG1lc3NhZ2UgZm9yXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgICBNZXNzYWdlIHRvIHVzZXIgZ2VuZXJhdGVkIGZyb20gdGhlIEVycm9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVFcnJvcih0ZXh0RWRpdG9yLCBlcnJvcikge1xuICBjb25zdCB7IHN0YWNrLCBtZXNzYWdlIH0gPSBlcnJvclxuICAvLyBPbmx5IHNob3cgdGhlIGZpcnN0IGxpbmUgb2YgdGhlIG1lc3NhZ2UgYXMgdGhlIGV4Y2VycHRcbiAgY29uc3QgZXhjZXJwdCA9IGBFcnJvciB3aGlsZSBydW5uaW5nIEVTTGludDogJHttZXNzYWdlLnNwbGl0KCdcXG4nKVswXX0uYFxuICBjb25zdCBkZXNjcmlwdGlvbiA9IGA8ZGl2IHN0eWxlPVwid2hpdGUtc3BhY2U6IHByZS13cmFwXCI+JHttZXNzYWdlfVxcbjxociAvPiR7c3RhY2t9PC9kaXY+YFxuICByZXR1cm4gZ2VuZXJhdGVVc2VyTWVzc2FnZSh0ZXh0RWRpdG9yLCB7IHNldmVyaXR5OiAnZXJyb3InLCBleGNlcnB0LCBkZXNjcmlwdGlvbiB9KVxufVxuXG5jb25zdCBnZW5lcmF0ZUludmFsaWRUcmFjZSA9IGFzeW5jICh7XG4gIG1zZ0xpbmUsIG1zZ0NvbCwgbXNnRW5kTGluZSwgbXNnRW5kQ29sLFxuICBlc2xpbnRGdWxsUmFuZ2UsIGZpbGVQYXRoLCB0ZXh0RWRpdG9yLCBydWxlSWQsIG1lc3NhZ2Vcbn0pID0+IHtcbiAgbGV0IGVyck1zZ1JhbmdlID0gYCR7bXNnTGluZSArIDF9OiR7bXNnQ29sfWBcbiAgaWYgKGVzbGludEZ1bGxSYW5nZSkge1xuICAgIGVyck1zZ1JhbmdlICs9IGAgLSAke21zZ0VuZExpbmUgKyAxfToke21zZ0VuZENvbCArIDF9YFxuICB9XG4gIGNvbnN0IHJhbmdlVGV4dCA9IGBSZXF1ZXN0ZWQgJHtlc2xpbnRGdWxsUmFuZ2UgPyAnc3RhcnQgcG9pbnQnIDogJ3JhbmdlJ306ICR7ZXJyTXNnUmFuZ2V9YFxuICBjb25zdCBpc3N1ZVVSTCA9ICdodHRwczovL2dpdGh1Yi5jb20vQXRvbUxpbnRlci9saW50ZXItZXNsaW50L2lzc3Vlcy9uZXcnXG4gIGNvbnN0IHRpdGxlVGV4dCA9IGBJbnZhbGlkIHBvc2l0aW9uIGdpdmVuIGJ5ICcke3J1bGVJZH0nYFxuICBjb25zdCB0aXRsZSA9IGVuY29kZVVSSUNvbXBvbmVudCh0aXRsZVRleHQpXG4gIGNvbnN0IGJvZHkgPSBlbmNvZGVVUklDb21wb25lbnQoW1xuICAgICdFU0xpbnQgcmV0dXJuZWQgYSBwb2ludCB0aGF0IGRpZCBub3QgZXhpc3QgaW4gdGhlIGRvY3VtZW50IGJlaW5nIGVkaXRlZC4nLFxuICAgIGBSdWxlOiBcXGAke3J1bGVJZH1cXGBgLFxuICAgIHJhbmdlVGV4dCxcbiAgICAnJywgJycsXG4gICAgJzwhLS0gSWYgYXQgYWxsIHBvc3NpYmxlLCBwbGVhc2UgaW5jbHVkZSBjb2RlIHRvIHJlcHJvZHVjZSB0aGlzIGlzc3VlISAtLT4nLFxuICAgICcnLCAnJyxcbiAgICAnRGVidWcgaW5mb3JtYXRpb246JyxcbiAgICAnYGBganNvbicsXG4gICAgSlNPTi5zdHJpbmdpZnkoYXdhaXQgZ2V0RGVidWdJbmZvKCksIG51bGwsIDIpLFxuICAgICdgYGAnXG4gIF0uam9pbignXFxuJykpXG5cbiAgY29uc3QgbG9jYXRpb24gPSB7XG4gICAgZmlsZTogZmlsZVBhdGgsXG4gICAgcG9zaXRpb246IGdlbmVyYXRlUmFuZ2UodGV4dEVkaXRvciwgMCksXG4gIH1cbiAgY29uc3QgbmV3SXNzdWVVUkwgPSBgJHtpc3N1ZVVSTH0/dGl0bGU9JHt0aXRsZX0mYm9keT0ke2JvZHl9YFxuXG4gIHJldHVybiB7XG4gICAgc2V2ZXJpdHk6ICdlcnJvcicsXG4gICAgZXhjZXJwdDogYCR7dGl0bGVUZXh0fS4gU2VlIHRoZSBkZXNjcmlwdGlvbiBmb3IgZGV0YWlscy4gYCArXG4gICAgICAnQ2xpY2sgdGhlIFVSTCB0byBvcGVuIGEgbmV3IGlzc3VlIScsXG4gICAgdXJsOiBuZXdJc3N1ZVVSTCxcbiAgICBsb2NhdGlvbixcbiAgICBkZXNjcmlwdGlvbjogYCR7cmFuZ2VUZXh0fVxcbk9yaWdpbmFsIG1lc3NhZ2U6ICR7bWVzc2FnZX1gXG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIHJhdyByZXNwb25zZSBmcm9tIEVTTGludCwgdGhpcyBwcm9jZXNzZXMgdGhlIG1lc3NhZ2VzIGludG8gYSBmb3JtYXRcbiAqIGNvbXBhdGlibGUgd2l0aCB0aGUgTGludGVyIEFQSS5cbiAqIEBwYXJhbSAge09iamVjdH0gICAgIG1lc3NhZ2VzICAgVGhlIG1lc3NhZ2VzIGZyb20gRVNMaW50J3MgcmVzcG9uc2VcbiAqIEBwYXJhbSAge1RleHRFZGl0b3J9IHRleHRFZGl0b3IgVGhlIEF0b206OlRleHRFZGl0b3Igb2YgdGhlIGZpbGUgdGhlIG1lc3NhZ2VzIGJlbG9uZyB0b1xuICogQHBhcmFtICB7Ym9vbH0gICAgICAgc2hvd1J1bGUgICBXaGV0aGVyIHRvIHNob3cgdGhlIHJ1bGUgaW4gdGhlIG1lc3NhZ2VzXG4gKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICAgICAgIFRoZSBtZXNzYWdlcyB0cmFuc2Zvcm1lZCBpbnRvIExpbnRlciBtZXNzYWdlc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0VTTGludE1lc3NhZ2VzKG1lc3NhZ2VzLCB0ZXh0RWRpdG9yLCBzaG93UnVsZSkge1xuICByZXR1cm4gUHJvbWlzZS5hbGwobWVzc2FnZXMubWFwKGFzeW5jICh7XG4gICAgZmF0YWwsIG1lc3NhZ2U6IG9yaWdpbmFsTWVzc2FnZSwgbGluZSwgc2V2ZXJpdHksIHJ1bGVJZCwgY29sdW1uLCBmaXgsIGVuZExpbmUsIGVuZENvbHVtblxuICB9KSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGZhdGFsID8gb3JpZ2luYWxNZXNzYWdlLnNwbGl0KCdcXG4nKVswXSA6IG9yaWdpbmFsTWVzc2FnZVxuICAgIGNvbnN0IGZpbGVQYXRoID0gdGV4dEVkaXRvci5nZXRQYXRoKClcbiAgICBjb25zdCB0ZXh0QnVmZmVyID0gdGV4dEVkaXRvci5nZXRCdWZmZXIoKVxuICAgIGxldCBsaW50ZXJGaXggPSBudWxsXG4gICAgaWYgKGZpeCkge1xuICAgICAgY29uc3QgZml4UmFuZ2UgPSBuZXcgUmFuZ2UoXG4gICAgICAgIHRleHRCdWZmZXIucG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChmaXgucmFuZ2VbMF0pLFxuICAgICAgICB0ZXh0QnVmZmVyLnBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgoZml4LnJhbmdlWzFdKVxuICAgICAgKVxuICAgICAgbGludGVyRml4ID0ge1xuICAgICAgICBwb3NpdGlvbjogZml4UmFuZ2UsXG4gICAgICAgIHJlcGxhY2VXaXRoOiBmaXgudGV4dFxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbXNnQ29sXG4gICAgbGV0IG1zZ0VuZExpbmVcbiAgICBsZXQgbXNnRW5kQ29sXG4gICAgbGV0IGVzbGludEZ1bGxSYW5nZSA9IGZhbHNlXG5cbiAgICAvKlxuICAgICBOb3RlOiBFU0xpbnQgcG9zaXRpb25zIGFyZSAxLWluZGV4ZWQsIHdoaWxlIEF0b20gZXhwZWN0cyAwLWluZGV4ZWQsXG4gICAgIHBvc2l0aW9ucy4gV2UgYXJlIHN1YnRyYWN0aW5nIDEgZnJvbSB0aGVzZSB2YWx1ZXMgaGVyZSBzbyB3ZSBkb24ndCBoYXZlIHRvXG4gICAgIGtlZXAgZG9pbmcgc28gaW4gbGF0ZXIgdXNlcy5cbiAgICAgKi9cbiAgICBjb25zdCBtc2dMaW5lID0gbGluZSAtIDFcbiAgICBpZiAodHlwZW9mIGVuZENvbHVtbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGVuZExpbmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlc2xpbnRGdWxsUmFuZ2UgPSB0cnVlXG4gICAgICAvLyBIZXJlIHdlIGFsd2F5cyB3YW50IHRoZSBjb2x1bW4gdG8gYmUgYSBudW1iZXJcbiAgICAgIG1zZ0NvbCA9IE1hdGgubWF4KDAsIGNvbHVtbiAtIDEpXG4gICAgICBtc2dFbmRMaW5lID0gZW5kTGluZSAtIDFcbiAgICAgIG1zZ0VuZENvbCA9IGVuZENvbHVtbiAtIDFcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2Ugd2FudCBtc2dDb2wgdG8gcmVtYWluIHVuZGVmaW5lZCBpZiBpdCB3YXMgaW5pdGlhbGx5IHNvXG4gICAgICAvLyBgZ2VuZXJhdGVSYW5nZWAgd2lsbCBnaXZlIHVzIGEgcmFuZ2Ugb3ZlciB0aGUgZW50aXJlIGxpbmVcbiAgICAgIG1zZ0NvbCA9IHR5cGVvZiBjb2x1bW4gIT09ICd1bmRlZmluZWQnID8gY29sdW1uIC0gMSA6IGNvbHVtblxuICAgIH1cblxuICAgIGxldCByZXQgPSB7XG4gICAgICBzZXZlcml0eTogc2V2ZXJpdHkgPT09IDEgPyAnd2FybmluZycgOiAnZXJyb3InLFxuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgZmlsZTogZmlsZVBhdGgsXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJ1bGVJZCkge1xuICAgICAgcmV0LnVybCA9IHJ1bGVzLmdldFJ1bGVVcmwocnVsZUlkKVxuICAgIH1cblxuICAgIGxldCByYW5nZVxuICAgIHRyeSB7XG4gICAgICBpZiAoZXNsaW50RnVsbFJhbmdlKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRleHRFZGl0b3IuZ2V0QnVmZmVyKClcbiAgICAgICAgdGhyb3dJZkludmFsaWRQb2ludChidWZmZXIsIG1zZ0xpbmUsIG1zZ0NvbClcbiAgICAgICAgdGhyb3dJZkludmFsaWRQb2ludChidWZmZXIsIG1zZ0VuZExpbmUsIG1zZ0VuZENvbClcbiAgICAgICAgcmFuZ2UgPSBbW21zZ0xpbmUsIG1zZ0NvbF0sIFttc2dFbmRMaW5lLCBtc2dFbmRDb2xdXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmFuZ2UgPSBnZW5lcmF0ZVJhbmdlKHRleHRFZGl0b3IsIG1zZ0xpbmUsIG1zZ0NvbClcbiAgICAgIH1cbiAgICAgIHJldC5sb2NhdGlvbi5wb3NpdGlvbiA9IHJhbmdlXG5cbiAgICAgIGNvbnN0IHJ1bGVBcHBlbmRpeCA9IHNob3dSdWxlID8gYCAoJHtydWxlSWQgfHwgJ0ZhdGFsJ30pYCA6ICcnXG4gICAgICByZXQuZXhjZXJwdCA9IGAke21lc3NhZ2V9JHtydWxlQXBwZW5kaXh9YFxuXG4gICAgICBpZiAobGludGVyRml4KSB7XG4gICAgICAgIHJldC5zb2x1dGlvbnMgPSBbbGludGVyRml4XVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0ID0gYXdhaXQgZ2VuZXJhdGVJbnZhbGlkVHJhY2Uoe1xuICAgICAgICBtc2dMaW5lLFxuICAgICAgICBtc2dDb2wsXG4gICAgICAgIG1zZ0VuZExpbmUsXG4gICAgICAgIG1zZ0VuZENvbCxcbiAgICAgICAgZXNsaW50RnVsbFJhbmdlLFxuICAgICAgICBmaWxlUGF0aCxcbiAgICAgICAgdGV4dEVkaXRvcixcbiAgICAgICAgcnVsZUlkLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0XG4gIH0pKVxufVxuXG4vKipcbiAqIFByb2Nlc3NlcyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgbGludCBqb2JcbiAqIEBwYXJhbSAge09iamVjdH0gICAgIHJlc3BvbnNlICAgVGhlIHJhdyByZXNwb25zZSBmcm9tIHRoZSBqb2JcbiAqIEBwYXJhbSAge1RleHRFZGl0b3J9IHRleHRFZGl0b3IgVGhlIEF0b206OlRleHRFZGl0b3Igb2YgdGhlIGZpbGUgdGhlIG1lc3NhZ2VzIGJlbG9uZyB0b1xuICogQHBhcmFtICB7Ym9vbH0gICAgICAgc2hvd1J1bGUgICBXaGV0aGVyIHRvIHNob3cgdGhlIHJ1bGUgaW4gdGhlIG1lc3NhZ2VzXG4gKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICAgICAgIFRoZSBtZXNzYWdlcyB0cmFuc2Zvcm1lZCBpbnRvIExpbnRlciBtZXNzYWdlc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0pvYlJlc3BvbnNlKHJlc3BvbnNlLCB0ZXh0RWRpdG9yLCBzaG93UnVsZSkge1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3BvbnNlLCAndXBkYXRlZFJ1bGVzJykpIHtcbiAgICBydWxlcy5yZXBsYWNlUnVsZXMocmVzcG9uc2UudXBkYXRlZFJ1bGVzKVxuICB9XG4gIHJldHVybiBwcm9jZXNzRVNMaW50TWVzc2FnZXMocmVzcG9uc2UubWVzc2FnZXMsIHRleHRFZGl0b3IsIHNob3dSdWxlKVxufVxuIl19