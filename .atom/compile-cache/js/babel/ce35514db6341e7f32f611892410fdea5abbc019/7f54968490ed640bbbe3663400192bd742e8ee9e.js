Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _atom = require('atom');

var _coreJsLibrary = require('core-js/library');

var _coreJsLibrary2 = _interopRequireDefault(_coreJsLibrary);

'use babel';

var find = _coreJsLibrary2['default'].Array.prototype.find;

var disposables = [];

var Lang = function Lang(rLangScope, openCommentToken, closeCommentToken) {
  return {
    test: function test(scope) {
      return rLangScope.test(scope);
    },
    commentTokens: { open: openCommentToken, close: closeCommentToken }
  };
};
var langs = [Lang(/^source\.js\.?/, '/*', '*/'), Lang(/^source\.css\.?/, '/*', '*/'), Lang(/^source\.php\.?/, '/*', '*/'), Lang(/^text\.html\.?/, '<!--', '-->'), Lang(/^source\.python\.?/, "'''", "'''")];

var config = {
  pad: {
    title: 'Pad with spaces',
    description: 'Pad selection with whitespace when commenting.',
    type: 'boolean',
    'default': false
  }
};

exports.config = config;

function activate() {
  disposables.push(atom.commands.add('atom-text-editor:not([mini])', { 'sublime-block-comment:toggle': toggle }));
}

function deactivate() {
  for (var disposable of disposables) {
    disposable.dispose();
  }disposables.length = 0;
}

function toggle() {
  var editor = atom.workspace.getActiveTextEditor();
  if (!editor) return;

  var buffer = editor.getBuffer();
  var padding = atom.config.get('sublime-block-comment.pad') ? ' ' : '';

  buffer.transact(function () {
    for (var selection of editor.getSelectionsOrderedByBufferPosition().reverse()) {
      var range = selection.getBufferRange();
      var textInRange = buffer.getTextInRange(range);
      var scopes = getPositionScopes(range.start).reverse();

      var lang = undefined;
      if (!scopes.some(function (scope) {
        return lang = find.call(langs, function (lang) {
          return lang.test(scope);
        });
      })) lang = langs[0];
      var commentTokens = lang.commentTokens;

      // If we are inside a block comment or have one fully or partially selected, uncomment it.
      if ((isInsideBlockComment(range.start) || isAtCloseCommentToken(range.start, commentTokens.close)) && (isInsideBlockComment(range.end) || isAtCloseCommentToken(range.end, commentTokens.close)) && ~[-1, textInRange.length - commentTokens.close.length].indexOf(textInRange.indexOf(commentTokens.close))) {
        var blockCommentCloseRange = undefined;
        var lastRow = buffer.getLastRow();
        for (var row = range.end.row; !blockCommentCloseRange && row <= lastRow; row++) {
          var line = buffer.lineForRow(row);
          for (var column = row === range.end.row ? Math.max(range.end.column - commentTokens.close.length + (
          // Python has the same tokens for block string begin and end, so we need an extra sanity check.
          // This logic would not work with JavaScript anyway as it the comment begin/end tokens don't have dedicated scopes.
          isPythonStringBlockBegin(range.end) ? commentTokens.open.length + 1 : 0), 0) : 0; (column = line.indexOf(commentTokens.close, column)) !== -1; column++) {
            if (isCommentDefinitionPunctuation([row, column])) {
              blockCommentCloseRange = new _atom.Range([row, column], [row, column + commentTokens.close.length]);
              break;
            }
          }
        }

        var blockCommentOpenRange = undefined;
        for (var row = range.start.row; !blockCommentOpenRange && row >= 0; row--) {
          var line = buffer.lineForRow(row);
          for (var column = row === range.start.row ? blockCommentCloseRange && row === blockCommentCloseRange.start.row
          // Python has the same tokens for block string begin and end, so we need an extra sanity check.
          // If end token is at the beginning of a line (column 0), skip to the line above to avoid matching the end token as the begin token as well.
          ? blockCommentCloseRange.start.column - 1 > 0 ? blockCommentCloseRange.start.column - 1 : (--row, line = buffer.lineForRow(row), line.length) : Math.min(range.start.column + commentTokens.open.length, line.length) : line.length; (column = line.lastIndexOf(commentTokens.open, column)) !== -1; column--) {
            if (isCommentDefinitionPunctuation([row, column])) {
              blockCommentOpenRange = new _atom.Range([row, column], [row, column + commentTokens.open.length]);
              break;
            }
          }
        }

        if (blockCommentCloseRange) {
          if (padding) {
            var blockCommentClosePaddedRangeStart = new _atom.Point(blockCommentCloseRange.start.row, blockCommentCloseRange.start.column - padding.length);
            if ((!blockCommentOpenRange || blockCommentClosePaddedRangeStart.compare(blockCommentOpenRange.end) >= 0) && buffer.getTextInRange([blockCommentClosePaddedRangeStart, blockCommentCloseRange.start]) === padding) {
              blockCommentCloseRange.start = blockCommentClosePaddedRangeStart;
            }
          }
          buffer['delete'](blockCommentCloseRange);
        }

        if (blockCommentOpenRange) {
          if (padding) {
            var blockCommentOpenPaddedRangeEnd = new _atom.Point(blockCommentOpenRange.end.row, blockCommentOpenRange.end.column + padding.length);
            if (
            // This sanity check also prevents excessively removing "overlapping" start/end padding.
            // E.g.: "/* */ a" => " a" instead of "a"
            (!blockCommentCloseRange || blockCommentOpenPaddedRangeEnd.compare(blockCommentCloseRange.start) <= 0) && buffer.getTextInRange([blockCommentOpenRange.end, blockCommentOpenPaddedRangeEnd]) === padding) {
              blockCommentOpenRange.end = blockCommentOpenPaddedRangeEnd;
            }
          }
          buffer['delete'](blockCommentOpenRange);
        }

        continue;
      }

      // Else, wrap selection with block comment.
      buffer.insert(range.end, padding + commentTokens.close);
      buffer.insert(range.start, commentTokens.open + padding);

      // Unselect the opening and closing comment tokens.
      var startRowColumnOffset = commentTokens.open.length + padding.length;
      selection.setBufferRange([[range.start.row, range.start.column + startRowColumnOffset], [range.end.row, range.end.column + (range.start.row === range.end.row ? startRowColumnOffset : 0)]]);
    }
  });

  function isInsideBlockComment(position) {
    var scopes = getPositionScopes(position);
    var commentScopePrefix = (isPythonSource(scopes) ? 'string.quoted.single' : 'comment') + '.block.';
    return scopes.some(function (scope) {
      return scope.startsWith(commentScopePrefix);
    });
  }

  function isCommentDefinitionPunctuation(position) {
    var scopes = getPositionScopes(position);
    var commentPunctuationScopePrefix = 'punctuation.definition.' + (isPythonSource(scopes) ? 'string' : 'comment') + '.';
    return scopes.some(function (scope) {
      return scope.startsWith(commentPunctuationScopePrefix);
    });
  }

  function getPositionScopes(position) {
    return editor.scopeDescriptorForBufferPosition(position).getScopesArray();
  }

  function isAtCloseCommentToken(position, closeCommentToken) {
    return position.column >= closeCommentToken.length && buffer.getTextInRange([[position.row, position.column - closeCommentToken.length], position]) === closeCommentToken && isCommentDefinitionPunctuation([position.row, position.column - 1]);
  }

  function isPythonSource(scopes) {
    return scopes[0] === 'source.python';
  }

  function isPythonPunctuationDefinitionStringBegin(scope) {
    return scope === 'punctuation.definition.string.begin.python';
  }

  function isPythonStringBlockBegin(position) {
    return isInsideBlockComment(position) && (getPositionScopes(position).some(isPythonPunctuationDefinitionStringBegin) ||
    // Atom does not identify the position at the end of the begin token as part of its scope, therefore we check one column to the left as well.
    position.column > 0 && getPositionScopes([position.row, position.column - 1]).some(isPythonPunctuationDefinitionStringBegin));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,