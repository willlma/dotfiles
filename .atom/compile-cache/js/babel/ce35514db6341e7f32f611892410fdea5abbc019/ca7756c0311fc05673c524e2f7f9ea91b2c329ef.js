Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getBufferPositionFromMouseEvent = getBufferPositionFromMouseEvent;
exports.mouseEventNearPosition = mouseEventNearPosition;
exports.hasParent = hasParent;

var TOOLTIP_WIDTH_HIDE_OFFSET = 30;

function getBufferPositionFromMouseEvent(event, editor, editorElement) {
  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var screenPosition = editorElement.component.screenPositionForPixelPosition(pixelPosition);
  if (Number.isNaN(screenPosition.row) || Number.isNaN(screenPosition.column)) return null;
  // ^ Workaround for NaN bug steelbrain/linter-ui-default#191
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  // Only allow offset of 20px - Fixes steelbrain/linter-ui-default#63
  if ((differenceTop === 0 || differenceTop > 0 && differenceTop < 20 || differenceTop < 0 && differenceTop > -20) && (differenceLeft === 0 || differenceLeft > 0 && differenceLeft < 20 || differenceLeft < 0 && differenceLeft > -20)) {
    return editor.bufferPositionForScreenPosition(screenPosition);
  }
  return null;
}

function mouseEventNearPosition(_ref) {
  var event = _ref.event;
  var editor = _ref.editor;
  var editorElement = _ref.editorElement;
  var tooltipElement = _ref.tooltipElement;
  var screenPosition = _ref.screenPosition;

  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;

  var editorLineHeight = editor.lineHeightInPixels;
  var elementHeight = tooltipElement.offsetHeight + editorLineHeight;
  var elementWidth = tooltipElement.offsetWidth;

  if (differenceTop > 0) {
    // Cursor is below the line
    if (differenceTop > elementHeight + 1.5 * editorLineHeight) {
      return false;
    }
  } else if (differenceTop < 0) {
    // Cursor is above the line
    if (differenceTop < -1.5 * editorLineHeight) {
      return false;
    }
  }
  if (differenceLeft > 0) {
    // Right of the start of highlight
    if (differenceLeft > elementWidth + TOOLTIP_WIDTH_HIDE_OFFSET) {
      return false;
    }
  } else if (differenceLeft < 0) {
    // Left of start of highlight
    if (differenceLeft < -1 * TOOLTIP_WIDTH_HIDE_OFFSET) {
      return false;
    }
  }
  return true;
}

function hasParent(givenElement, selector) {
  var element = givenElement;
  do {
    if (element.matches(selector)) {
      return true;
    }
    element = element.parentElement;
  } while (element && element.nodeName !== 'HTML');
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsL2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci11aS1kZWZhdWx0L2xpYi9lZGl0b3IvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUEsSUFBTSx5QkFBeUIsR0FBRyxFQUFFLENBQUE7O0FBRTdCLFNBQVMsK0JBQStCLENBQUMsS0FBaUIsRUFBRSxNQUFrQixFQUFFLGFBQXFCLEVBQVU7QUFDcEgsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMvRSxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQzVGLE1BQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUE7O0FBRXhGLE1BQU0scUJBQXFCLEdBQUcsYUFBYSxDQUFDLDhCQUE4QixDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQzFGLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFBO0FBQ25FLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFBOztBQUV0RSxNQUNFLENBQUMsYUFBYSxLQUFLLENBQUMsSUFBSyxhQUFhLEdBQUcsQ0FBQyxJQUFJLGFBQWEsR0FBRyxFQUFFLEFBQUMsSUFBSyxhQUFhLEdBQUcsQ0FBQyxJQUFJLGFBQWEsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUM5RyxjQUFjLEtBQUssQ0FBQyxJQUFLLGNBQWMsR0FBRyxDQUFDLElBQUksY0FBYyxHQUFHLEVBQUUsQUFBQyxJQUFLLGNBQWMsR0FBRyxDQUFDLElBQUksY0FBYyxHQUFHLENBQUMsRUFBRSxDQUFDLEFBQUMsRUFDckg7QUFDQSxXQUFPLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxjQUFjLENBQUMsQ0FBQTtHQUM5RDtBQUNELFNBQU8sSUFBSSxDQUFBO0NBQ1o7O0FBRU0sU0FBUyxzQkFBc0IsQ0FBQyxJQUF3RSxFQUFXO01BQWpGLEtBQUssR0FBUCxJQUF3RSxDQUF0RSxLQUFLO01BQUUsTUFBTSxHQUFmLElBQXdFLENBQS9ELE1BQU07TUFBRSxhQUFhLEdBQTlCLElBQXdFLENBQXZELGFBQWE7TUFBRSxjQUFjLEdBQTlDLElBQXdFLENBQXhDLGNBQWM7TUFBRSxjQUFjLEdBQTlELElBQXdFLENBQXhCLGNBQWM7O0FBQ25HLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDL0UsTUFBTSxxQkFBcUIsR0FBRyxhQUFhLENBQUMsOEJBQThCLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDMUYsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUE7QUFDbkUsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUE7O0FBRXRFLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFBO0FBQ2xELE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUE7QUFDcEUsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQTs7QUFFL0MsTUFBSSxhQUFhLEdBQUcsQ0FBQyxFQUFFOztBQUVyQixRQUFJLGFBQWEsR0FBRyxhQUFhLEdBQUcsR0FBRyxHQUFHLGdCQUFnQixFQUFFO0FBQzFELGFBQU8sS0FBSyxDQUFBO0tBQ2I7R0FDRixNQUFNLElBQUksYUFBYSxHQUFHLENBQUMsRUFBRTs7QUFFNUIsUUFBSSxhQUFhLEdBQUcsQ0FBQyxHQUFHLEdBQUcsZ0JBQWdCLEVBQUU7QUFDM0MsYUFBTyxLQUFLLENBQUE7S0FDYjtHQUNGO0FBQ0QsTUFBSSxjQUFjLEdBQUcsQ0FBQyxFQUFFOztBQUV0QixRQUFJLGNBQWMsR0FBRyxZQUFZLEdBQUcseUJBQXlCLEVBQUU7QUFDN0QsYUFBTyxLQUFLLENBQUE7S0FDYjtHQUNGLE1BQU0sSUFBSSxjQUFjLEdBQUcsQ0FBQyxFQUFFOztBQUU3QixRQUFJLGNBQWMsR0FBRyxDQUFDLENBQUMsR0FBRyx5QkFBeUIsRUFBRTtBQUNuRCxhQUFPLEtBQUssQ0FBQTtLQUNiO0dBQ0Y7QUFDRCxTQUFPLElBQUksQ0FBQTtDQUNaOztBQUVNLFNBQVMsU0FBUyxDQUFDLFlBQXlCLEVBQUUsUUFBZ0IsRUFBVztBQUM5RSxNQUFJLE9BQU8sR0FBRyxZQUFZLENBQUE7QUFDMUIsS0FBRztBQUNELFFBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUM3QixhQUFPLElBQUksQ0FBQTtLQUNaO0FBQ0QsV0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUE7R0FDaEMsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUM7QUFDaEQsU0FBTyxLQUFLLENBQUE7Q0FDYiIsImZpbGUiOiIvVXNlcnMvd2lsbC9kb3RmaWxlcy8uYXRvbS9wYWNrYWdlcy9saW50ZXItdWktZGVmYXVsdC9saWIvZWRpdG9yL2hlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgdHlwZSB7IFBvaW50LCBUZXh0RWRpdG9yIH0gZnJvbSAnYXRvbSdcblxuY29uc3QgVE9PTFRJUF9XSURUSF9ISURFX09GRlNFVCA9IDMwXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdWZmZXJQb3NpdGlvbkZyb21Nb3VzZUV2ZW50KGV2ZW50OiBNb3VzZUV2ZW50LCBlZGl0b3I6IFRleHRFZGl0b3IsIGVkaXRvckVsZW1lbnQ6IE9iamVjdCk6ID9Qb2ludCB7XG4gIGNvbnN0IHBpeGVsUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5waXhlbFBvc2l0aW9uRm9yTW91c2VFdmVudChldmVudClcbiAgY29uc3Qgc2NyZWVuUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5zY3JlZW5Qb3NpdGlvbkZvclBpeGVsUG9zaXRpb24ocGl4ZWxQb3NpdGlvbilcbiAgaWYgKE51bWJlci5pc05hTihzY3JlZW5Qb3NpdGlvbi5yb3cpIHx8IE51bWJlci5pc05hTihzY3JlZW5Qb3NpdGlvbi5jb2x1bW4pKSByZXR1cm4gbnVsbFxuICAvLyBeIFdvcmthcm91bmQgZm9yIE5hTiBidWcgc3RlZWxicmFpbi9saW50ZXItdWktZGVmYXVsdCMxOTFcbiAgY29uc3QgZXhwZWN0ZWRQaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5waXhlbFBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIGNvbnN0IGRpZmZlcmVuY2VUb3AgPSBwaXhlbFBvc2l0aW9uLnRvcCAtIGV4cGVjdGVkUGl4ZWxQb3NpdGlvbi50b3BcbiAgY29uc3QgZGlmZmVyZW5jZUxlZnQgPSBwaXhlbFBvc2l0aW9uLmxlZnQgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24ubGVmdFxuICAvLyBPbmx5IGFsbG93IG9mZnNldCBvZiAyMHB4IC0gRml4ZXMgc3RlZWxicmFpbi9saW50ZXItdWktZGVmYXVsdCM2M1xuICBpZiAoXG4gICAgKGRpZmZlcmVuY2VUb3AgPT09IDAgfHwgKGRpZmZlcmVuY2VUb3AgPiAwICYmIGRpZmZlcmVuY2VUb3AgPCAyMCkgfHwgKGRpZmZlcmVuY2VUb3AgPCAwICYmIGRpZmZlcmVuY2VUb3AgPiAtMjApKSAmJlxuICAgIChkaWZmZXJlbmNlTGVmdCA9PT0gMCB8fCAoZGlmZmVyZW5jZUxlZnQgPiAwICYmIGRpZmZlcmVuY2VMZWZ0IDwgMjApIHx8IChkaWZmZXJlbmNlTGVmdCA8IDAgJiYgZGlmZmVyZW5jZUxlZnQgPiAtMjApKVxuICApIHtcbiAgICByZXR1cm4gZWRpdG9yLmJ1ZmZlclBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdXNlRXZlbnROZWFyUG9zaXRpb24oeyBldmVudCwgZWRpdG9yLCBlZGl0b3JFbGVtZW50LCB0b29sdGlwRWxlbWVudCwgc2NyZWVuUG9zaXRpb24gfTogT2JqZWN0KTogYm9vbGVhbiB7XG4gIGNvbnN0IHBpeGVsUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5waXhlbFBvc2l0aW9uRm9yTW91c2VFdmVudChldmVudClcbiAgY29uc3QgZXhwZWN0ZWRQaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5waXhlbFBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIGNvbnN0IGRpZmZlcmVuY2VUb3AgPSBwaXhlbFBvc2l0aW9uLnRvcCAtIGV4cGVjdGVkUGl4ZWxQb3NpdGlvbi50b3BcbiAgY29uc3QgZGlmZmVyZW5jZUxlZnQgPSBwaXhlbFBvc2l0aW9uLmxlZnQgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24ubGVmdFxuXG4gIGNvbnN0IGVkaXRvckxpbmVIZWlnaHQgPSBlZGl0b3IubGluZUhlaWdodEluUGl4ZWxzXG4gIGNvbnN0IGVsZW1lbnRIZWlnaHQgPSB0b29sdGlwRWxlbWVudC5vZmZzZXRIZWlnaHQgKyBlZGl0b3JMaW5lSGVpZ2h0XG4gIGNvbnN0IGVsZW1lbnRXaWR0aCA9IHRvb2x0aXBFbGVtZW50Lm9mZnNldFdpZHRoXG5cbiAgaWYgKGRpZmZlcmVuY2VUb3AgPiAwKSB7XG4gICAgLy8gQ3Vyc29yIGlzIGJlbG93IHRoZSBsaW5lXG4gICAgaWYgKGRpZmZlcmVuY2VUb3AgPiBlbGVtZW50SGVpZ2h0ICsgMS41ICogZWRpdG9yTGluZUhlaWdodCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKGRpZmZlcmVuY2VUb3AgPCAwKSB7XG4gICAgLy8gQ3Vyc29yIGlzIGFib3ZlIHRoZSBsaW5lXG4gICAgaWYgKGRpZmZlcmVuY2VUb3AgPCAtMS41ICogZWRpdG9yTGluZUhlaWdodCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIGlmIChkaWZmZXJlbmNlTGVmdCA+IDApIHtcbiAgICAvLyBSaWdodCBvZiB0aGUgc3RhcnQgb2YgaGlnaGxpZ2h0XG4gICAgaWYgKGRpZmZlcmVuY2VMZWZ0ID4gZWxlbWVudFdpZHRoICsgVE9PTFRJUF9XSURUSF9ISURFX09GRlNFVCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKGRpZmZlcmVuY2VMZWZ0IDwgMCkge1xuICAgIC8vIExlZnQgb2Ygc3RhcnQgb2YgaGlnaGxpZ2h0XG4gICAgaWYgKGRpZmZlcmVuY2VMZWZ0IDwgLTEgKiBUT09MVElQX1dJRFRIX0hJREVfT0ZGU0VUKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1BhcmVudChnaXZlbkVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzZWxlY3Rvcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGxldCBlbGVtZW50ID0gZ2l2ZW5FbGVtZW50XG4gIGRvIHtcbiAgICBpZiAoZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudFxuICB9IHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUgIT09ICdIVE1MJylcbiAgcmV0dXJuIGZhbHNlXG59XG4iXX0=