Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = getCommitLink;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _gitWrapper = require('git-wrapper');

var _gitWrapper2 = _interopRequireDefault(_gitWrapper);

var _findRepo = require('./find-repo');

var _findRepo2 = _interopRequireDefault(_findRepo);

var _configUrlSchemes = require('../../config/url-schemes');

var _configUrlSchemes2 = _interopRequireDefault(_configUrlSchemes);

'use babel';

function parseRemote(remote, config) {
  for (var exp of config.exps) {
    var m = remote.match(exp);
    if (m) {
      return { protocol: m[1], host: m[2], user: m[3], repo: m[4] };
    }
  }

  return null;
}

function buildLink(remote, hash, config) {
  var data = parseRemote(remote, config);
  if (data) {
    return config.template.replace('{protocol}', data.protocol || 'https').replace('{host}', data.host).replace('{user}', data.user).replace('{repo}', data.repo).replace('{hash}', hash.substr(0, 8)).replace('{long-hash}', hash);
  }

  return null;
}

function getConfig(git, key, callback) {
  git.exec('config', { get: true }, [key], callback);
}

function getCommitLink(file, hash, callback) {
  var repoPath = (0, _findRepo2['default'])(file);
  if (!repoPath) {
    return;
  }

  var git = new _gitWrapper2['default']({ 'git-dir': repoPath });

  getConfig(git, 'atom-blame.browser-url', function (error, url) {
    if (!error && url) {
      var link = url.replace(/(^\s+|\s+$)/g, '').replace('{hash}', hash.substr(0, 8)).replace('{long-hash}', hash);

      if (link) {
        return callback(link);
      }
    }

    getConfig(git, 'remote.origin.url', function (error, remote) {
      if (error) {
        return console.error(error);
      }

      remote = remote.replace(/(^\s+|\s+$)/g, '');

      for (var config of _configUrlSchemes2['default']) {
        var link = buildLink(remote, hash, config);
        if (link) {
          return callback(link);
        }
      }

      callback(null);
    });
  });
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsL2RvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2JsYW1lL2xpYi9wcm92aWRlci9naXQvZ2V0LWNvbW1pdC1saW5rLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztxQkFxQ3dCLGFBQWE7Ozs7MEJBbkNyQixhQUFhOzs7O3dCQUVSLGFBQWE7Ozs7Z0NBQ2QsMEJBQTBCOzs7O0FBTDlDLFdBQVcsQ0FBQTs7QUFPWCxTQUFTLFdBQVcsQ0FBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQ3BDLE9BQUssSUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtBQUM3QixRQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzNCLFFBQUksQ0FBQyxFQUFFO0FBQ0wsYUFBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtLQUM5RDtHQUNGOztBQUVELFNBQU8sSUFBSSxDQUFBO0NBQ1o7O0FBRUQsU0FBUyxTQUFTLENBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7QUFDeEMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUN4QyxNQUFJLElBQUksRUFBRTtBQUNSLFdBQU8sTUFBTSxDQUFDLFFBQVEsQ0FDbkIsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxDQUMvQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDNUIsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQzVCLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUM1QixPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3BDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUE7R0FDaEM7O0FBRUQsU0FBTyxJQUFJLENBQUE7Q0FDWjs7QUFFRCxTQUFTLFNBQVMsQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtBQUN0QyxLQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFFLEdBQUcsQ0FBRSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0NBQ3JEOztBQUVjLFNBQVMsYUFBYSxDQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO0FBQzNELE1BQU0sUUFBUSxHQUFHLDJCQUFTLElBQUksQ0FBQyxDQUFBO0FBQy9CLE1BQUksQ0FBQyxRQUFRLEVBQUU7QUFDYixXQUFNO0dBQ1A7O0FBRUQsTUFBTSxHQUFHLEdBQUcsNEJBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTs7QUFFNUMsV0FBUyxDQUFDLEdBQUcsRUFBRSx3QkFBd0IsRUFBRSxVQUFDLEtBQUssRUFBRSxHQUFHLEVBQUs7QUFDdkQsUUFBSSxDQUFDLEtBQUssSUFBSSxHQUFHLEVBQUU7QUFDakIsVUFBTSxJQUFJLEdBQUcsR0FBRyxDQUNiLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQzNCLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDcEMsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQTs7QUFFL0IsVUFBSSxJQUFJLEVBQUU7QUFDUixlQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtPQUN0QjtLQUNGOztBQUVELGFBQVMsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsVUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFLO0FBQ3JELFVBQUksS0FBSyxFQUFFO0FBQUUsZUFBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO09BQUU7O0FBRTFDLFlBQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQTs7QUFFM0MsV0FBSyxJQUFNLE1BQU0sbUNBQWE7QUFDNUIsWUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFDNUMsWUFBSSxJQUFJLEVBQUU7QUFDUixpQkFBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7T0FDRjs7QUFFRCxjQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDZixDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7Q0FDSCIsImZpbGUiOiIvVXNlcnMvd2lsbC9kb3RmaWxlcy8uYXRvbS9wYWNrYWdlcy9ibGFtZS9saWIvcHJvdmlkZXIvZ2l0L2dldC1jb21taXQtbGluay5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmltcG9ydCBHaXQgZnJvbSAnZ2l0LXdyYXBwZXInXG5cbmltcG9ydCBmaW5kUmVwbyBmcm9tICcuL2ZpbmQtcmVwbydcbmltcG9ydCBjb25maWdzIGZyb20gJy4uLy4uL2NvbmZpZy91cmwtc2NoZW1lcydcblxuZnVuY3Rpb24gcGFyc2VSZW1vdGUgKHJlbW90ZSwgY29uZmlnKSB7XG4gIGZvciAoY29uc3QgZXhwIG9mIGNvbmZpZy5leHBzKSB7XG4gICAgY29uc3QgbSA9IHJlbW90ZS5tYXRjaChleHApXG4gICAgaWYgKG0pIHtcbiAgICAgIHJldHVybiB7IHByb3RvY29sOiBtWzFdLCBob3N0OiBtWzJdLCB1c2VyOiBtWzNdLCByZXBvOiBtWzRdIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5mdW5jdGlvbiBidWlsZExpbmsgKHJlbW90ZSwgaGFzaCwgY29uZmlnKSB7XG4gIGNvbnN0IGRhdGEgPSBwYXJzZVJlbW90ZShyZW1vdGUsIGNvbmZpZylcbiAgaWYgKGRhdGEpIHtcbiAgICByZXR1cm4gY29uZmlnLnRlbXBsYXRlXG4gICAgICAucmVwbGFjZSgne3Byb3RvY29sfScsIGRhdGEucHJvdG9jb2wgfHwgJ2h0dHBzJylcbiAgICAgIC5yZXBsYWNlKCd7aG9zdH0nLCBkYXRhLmhvc3QpXG4gICAgICAucmVwbGFjZSgne3VzZXJ9JywgZGF0YS51c2VyKVxuICAgICAgLnJlcGxhY2UoJ3tyZXBvfScsIGRhdGEucmVwbylcbiAgICAgIC5yZXBsYWNlKCd7aGFzaH0nLCBoYXNoLnN1YnN0cigwLCA4KSlcbiAgICAgIC5yZXBsYWNlKCd7bG9uZy1oYXNofScsIGhhc2gpXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5mdW5jdGlvbiBnZXRDb25maWcgKGdpdCwga2V5LCBjYWxsYmFjaykge1xuICBnaXQuZXhlYygnY29uZmlnJywgeyBnZXQ6IHRydWUgfSwgWyBrZXkgXSwgY2FsbGJhY2spXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbW1pdExpbmsgKGZpbGUsIGhhc2gsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHJlcG9QYXRoID0gZmluZFJlcG8oZmlsZSlcbiAgaWYgKCFyZXBvUGF0aCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgZ2l0ID0gbmV3IEdpdCh7ICdnaXQtZGlyJzogcmVwb1BhdGggfSlcblxuICBnZXRDb25maWcoZ2l0LCAnYXRvbS1ibGFtZS5icm93c2VyLXVybCcsIChlcnJvciwgdXJsKSA9PiB7XG4gICAgaWYgKCFlcnJvciAmJiB1cmwpIHtcbiAgICAgIGNvbnN0IGxpbmsgPSB1cmxcbiAgICAgICAgLnJlcGxhY2UoLyheXFxzK3xcXHMrJCkvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKCd7aGFzaH0nLCBoYXNoLnN1YnN0cigwLCA4KSlcbiAgICAgICAgLnJlcGxhY2UoJ3tsb25nLWhhc2h9JywgaGFzaClcblxuICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGxpbmspXG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q29uZmlnKGdpdCwgJ3JlbW90ZS5vcmlnaW4udXJsJywgKGVycm9yLCByZW1vdGUpID0+IHtcbiAgICAgIGlmIChlcnJvcikgeyByZXR1cm4gY29uc29sZS5lcnJvcihlcnJvcikgfVxuXG4gICAgICByZW1vdGUgPSByZW1vdGUucmVwbGFjZSgvKF5cXHMrfFxccyskKS9nLCAnJylcblxuICAgICAgZm9yIChjb25zdCBjb25maWcgb2YgY29uZmlncykge1xuICAgICAgICBjb25zdCBsaW5rID0gYnVpbGRMaW5rKHJlbW90ZSwgaGFzaCwgY29uZmlnKVxuICAgICAgICBpZiAobGluaykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhsaW5rKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwpXG4gICAgfSlcbiAgfSlcbn1cbiJdfQ==