var _atom = require('atom');

'use babel';

var escapeRegExp = require('escape-regex-string');
var repeating = require('repeating');

function max(arr) {
  return arr.reduce(function (cur, next) {
    return next > cur ? next : cur;
  }, 0);
}

var CHARACTER_RE = new RegExp('[\\w' + 'А-ЯЁа-яё' + ']');

// AtomHardWrap
module.exports = {
  subscriptions: null,

  activate: function activate(state) {
    var _this = this;

    this.subscriptions = new _atom.CompositeDisposable();

    // Register command that toggles this view
    this.subscriptions.add(atom.commands.add('atom-text-editor', {
      'hard-wrap:reflow-selection': function hardWrapReflowSelection() {
        return _this.reflowSelection();
      }
    }));
  },

  deactivate: function deactivate() {
    this.subscriptions.dispose();
  },

  getMaxLineLength: function getMaxLineLength(range, textEditor) {
    var maxLen = 0;
    for (var row of range.getBufferRange().getRows()) {
      var len = textEditor.lineTextForBufferRow(row).length;
      if (len > maxLen) {
        maxLen = len;
      }
    }
    return maxLen;
  },

  getWrapColumn: function getWrapColumn(range, textEditor) {
    if (!atom.packages.isPackageLoaded('multi-wrap-guide')) {
      return atom.config.get('editor.preferredLineLength', { scope: textEditor.getRootScopeDescriptor() });
    }

    try {
      var textEditorView = atom.views.getView(textEditor);
      var wrapGuideView = textEditorView.rootElement.querySelector('.multi-wrap-guide-view');
      var columns = wrapGuideView.spacePenView.columns;
      if (columns.length === 0) {
        return atom.config.get('editor.preferredLineLength');
      }
      if (columns.length === 1) {
        return columns[0];
      }
      var maxLineLength = this.getMaxLineLength(range, textEditor);
      var maxCol = 0;
      for (var col of columns) {
        if (col < maxLineLength && col > maxCol) {
          maxCol = col;
        }
      }
      if (maxCol === 0) maxCol = max(columns);
      return maxCol;
    } catch (err) {
      return atom.config.get('editor.preferredLineLength');
    }
  },

  reflowSelection: function reflowSelection() {
    var _this2 = this;

    var editor = atom.workspace.getActiveTextEditor();
    editor.transact(function () {
      for (var range of editor.getSelectedBufferRanges()) {
        // Selection.selectToBeginningOfLine()
        // selection.selectToEndOfLine()
        if (range.isEmpty()) {
          range = editor.rowRangeForParagraphAtBufferRow(range.getRows()[0]);
          if (range == null) continue; // Nothing to do here
        }

        var reflowOptions = {
          wrapColumn: _this2.getWrapColumn(range, editor),
          tabLength: _this2.getTabLength(editor)
        };
        var reflowedText = _this2.reflow(editor.getTextInBufferRange(range), reflowOptions);
        editor.getBuffer().setTextInRange(range, reflowedText);
      }
    });
  },

  // "borrowed" from atom/autoflow
  // TODO: move this to a node module, submit PR to autoflow to use that.
  reflow: function reflow(text, _ref) {
    var _this3 = this;

    var wrapColumn = _ref.wrapColumn;
    var tabLength = _ref.tabLength;

    var paragraphs = [];
    // Convert all \r\n and \r to \n. the text buffer will normalise them later
    text = text.replace(/\r\n?/g, '\n');

    var paragraphBlocks = text.split(/\n\s*\n/g);
    var tabLengthInSpaces = tabLength == null ? '' : repeating(tabLength, ' ');

    var _loop = function (block) {
      // TODO: this could be more language specific. Use the actual comment char.
      var linePrefix = block.match(/^\s*[/#*-]*\s*/g)[0];
      var linePrefixTabExpanded = tabLength ? linePrefix.replace(/\t/g, tabLengthInSpaces) : linePrefix;
      var escapedLinePrefix = linePrefix && escapeRegExp(linePrefix);
      var blockLines = block.split('\n');

      if (linePrefix) {
        blockLines = blockLines.map(function (blockLine) {
          return blockLine.replace(new RegExp('^' + escapedLinePrefix), '');
        });
      }

      blockLines = blockLines.map(function (blockLine) {
        return blockLine.replace(/^\s+/, '');
      });

      var lines = [];
      var currentLine = [];
      var currentLineLength = linePrefixTabExpanded.length;

      var segments = _this3.segmentText(blockLines.join(' '));

      for (var segment of segments) {
        if (_this3.wrapSegment(segment, currentLineLength, wrapColumn)) {
          lines.push(linePrefix + currentLine.join(''));
          currentLine = [];
          currentLineLength = linePrefixTabExpanded.length;
        }
        currentLine.push(segment);
        currentLineLength += segment.length;
      }
      lines.push(linePrefix + currentLine.join(''));

      paragraphs.push(lines.join('\n').replace(/\s+\n/g, '\n'));
    };

    for (var block of paragraphBlocks) {
      _loop(block);
    }

    return paragraphs.join('\n\n');
  },

  getTabLength: function getTabLength(editor) {
    var tabLength = atom.config.get('editor.tabLength', { scope: editor.getRootScopeDescriptor() });
    return tabLength == null ? 2 : tabLength;
  },

  wrapSegment: function wrapSegment(segment, currentLineLength, wrapColumn) {
    return CHARACTER_RE.test(segment) && currentLineLength + segment.length > wrapColumn && (currentLineLength > 0 || segment.length < wrapColumn) && true;
  },

  segmentText: function segmentText(text) {
    var segments = [];
    var re = /[\s]+|[^\s]+/g;
    var match = undefined;
    while (match = re.exec(text)) segments.push(match[0]);
    return segments;
  }
};
/* English */ /* Cyrillic */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,