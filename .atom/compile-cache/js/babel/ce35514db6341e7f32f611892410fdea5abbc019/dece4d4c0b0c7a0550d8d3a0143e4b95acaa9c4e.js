'use babel';

// More types support please refer to esprima source code
Object.defineProperty(exports, '__esModule', {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var SINGLE_TAG_TYPE = ['ClassDeclaration', 'ExpressionStatement', 'ExportDefaultDeclaration', 'ExportNamedDeclaration', 'FunctionDeclaration', 'MethodDefinition'];
var MULTI_TAGS_TYPE = ['ImportDeclaration', 'VariableDeclaration'];

exports['default'] = {

  init: function init() {
    this.esprima = require('esprima');
  },

  parseFile: _asyncToGenerator(function* (ctx) {
    if (!this.esprima) this.init();

    var self = this,
        esprima = this.esprima,
        tags = {};

    var ast = undefined;
    try {
      ast = esprima.parseScript(ctx.content, {
        loc: true,
        tolerant: true
      });
    } catch (e) {
      console.error(e + '\n\nTry to use other parsing solution...');
      // return {
      //     err: `Error!!!\nLine number: ${e.lineNumber}\nDescription: ${e.description}`
      // };
      var jsctags = require('./javascript-sub');
      return yield jsctags.parseFile(ctx);
    }

    this.parseDeclar(tags, ast.body);
    // Parent of first level node is script
    for (var i in tags) {
      tags[i].parent = null;
    }return {
      list: {},
      tree: tags
    };
  }),

  parseDeclar: function parseDeclar(tags, ast) {
    var self = this;
    ast.forEach(function (i) {
      var type = i.type,
          child = null,
          name = undefined,
          id = undefined;

      if (SINGLE_TAG_TYPE.includes(type)) {
        var line = i.loc.start.line;

        if ('ClassDeclaration' === type) {
          name = i.id.name;
          id = line + '-' + name;
          type = 'class';

          if (i.body.body.length > 0) {
            child = {};
            self.parseDeclar(child, i.body.body);
          }
        }

        // Only for `module.exports` now
        else if ('ExpressionStatement' === type) {
            var left = i.expression.left,
                right = i.expression.right;
            if (!left || !left.object || !left.property || !right) return;

            if ('module' !== left.object.name || 'exports' !== left.property.name) return;
            if ('ClassExpression' !== right.type && 'ObjectExpression' !== right.type) return;

            name = 'exports';
            id = line + '-' + name;
            type = 'class';
            child = {};

            if ('ClassExpression' === right.type) self.parseDeclar(child, right.body.body);else if ('ObjectExpression' === right.type) self.parseExpr(child, right.properties);
          }

          /*
           *  Pattern: export default expression;
           */
          else if ('ExportDefaultDeclaration' === type) {
              name = 'export default';
              id = line + '-' + name;
              type = 'class';

              var dec = i.declaration;

              // Ignore 'export default XXX;', XXX should have been parsed before
              if ('ObjectExpression' === dec.type && dec.properties.length > 0) {
                child = {};
                self.parseExpr(child, dec.properties);
              } else if ('ClassDeclaration' === dec.type && dec.body.body.length > 0) {
                child = {};
                self.parseExpr(child, dec.body.body);
              } else if ('FunctionDeclaration' === dec.type && dec.body.body.length > 0) {
                type = 'function';
                child = {};
                self.parseDeclar(child, dec.body.body);
              }
            }

            /*
             *  Pattern: export declaration. Declarations could be:
             *    - class Foo {}
             *    - function Foo {}
             */
            else if ('ExportNamedDeclaration' === type) {
                var dec = i.declaration;

                if (!dec) {
                  return;

                  // TODO: for the case 'export { A, B }'
                  if (dec.specifiers.length) {}
                }

                name = dec.id.name;
                id = line + '-' + name;
                type = 'class';

                // Do not support variables now
                if (!name) return;

                if ('ClassDeclaration' === dec.type && dec.body.body.length > 0) {
                  child = {};
                  self.parseExpr(child, dec.body.body);
                } else if ('FunctionDeclaration' === dec.type && dec.body.body.length > 0) {
                  type = 'function';
                  child = {};
                  self.parseDeclar(child, dec.body.body);
                }
              } else if ('FunctionDeclaration' === type) {
                (function () {
                  var params = [];
                  i.params.forEach(function (p) {
                    params.push(p.name);
                  });
                  name = i.id.name + '(' + params.join(', ') + ')';
                  id = line + '-' + i.id.name + '()';
                  type = 'function';

                  if (i.body.body.length > 0) {
                    child = {};
                    self.parseDeclar(child, i.body.body);
                  }
                })();
              } else if ('MethodDefinition' === type) {
                (function () {
                  var params = [];
                  i.value.params.forEach(function (p) {
                    params.push(p.name);
                  });
                  name = i.key.name + '(' + params.join(', ') + ')';
                  id = line + '-' + i.key.name + '()';
                  type = 'method';

                  if (i.value.body.body.length > 0) {
                    child = {};
                    self.parseDeclar(child, i.value.body.body);
                  }
                })();
              }

        tags[id] = {
          name: name,
          type: type,
          lineno: line,
          parent: ast,
          child: child,
          id: id
        };
      } else if (MULTI_TAGS_TYPE.includes(type)) {

        if ('ImportDeclaration' === type) {
          i.specifiers.forEach(function (sp) {
            var line = sp.loc.start.line;
            name = sp.local.name;
            id = line + '-' + name;
            type = 'import';

            tags[id] = {
              name: name,
              type: type,
              lineno: line,
              parent: ast,
              child: child,
              id: id
            };
          });
        } else if ('VariableDeclaration' === type) {
          i.declarations.forEach(function (v) {
            var line = v.loc.start.line;
            name = v.id.name;
            id = line + '-' + name;
            type = 'var';

            if (v.init && 'CallExpression' === v.init.type) {
              var method = v.init.callee.property;
              if (method && method.name === 'extend') {
                child = {};
                v.init.arguments.forEach(function (i) {
                  if (i.properties) self.parseExpr(child, i.properties);
                });
              }
            } else if (v.init && 'ObjectExpression' === v.init.type) {
              if (v.init.properties.length > 0) {
                child = {};
                self.parseExpr(child, v.init.properties);
              }
            }

            tags[id] = {
              name: name,
              type: type,
              lineno: line,
              parent: ast,
              child: child,
              id: id
            };
          });
        }
      }
    });
  },

  parseExpr: function parseExpr(tags, ast) {
    var self = this;
    ast.forEach(function (i) {
      var type = i.value.type,
          line = i.loc.start.line,
          child = null,
          name = undefined,
          id = undefined;

      if ('FunctionExpression' === type) {
        (function () {
          var params = [];
          i.value.params.forEach(function (p) {
            params.push(p.name);
          });

          name = i.key.name + '(' + params.join(', ') + ')';
          id = line + '-' + i.key.name + '()';
          type = 'function';

          if (i.value.body.body.length > 0) {
            child = {};
            self.parseDeclar(child, i.value.body.body);
          }

          tags[id] = {
            name: name,
            type: type,
            lineno: line,
            parent: ast,
            child: child,
            id: id
          };
        })();
      } else {
        type = 'prop';
        name = i.key.value;
        if (i.key.value) name = i.key.value;else name = i.key.name;
        id = line + '-' + name;

        if (i.value.properties && i.value.properties.length > 0) {
          child = {};
          self.parseExpr(child, i.value.properties);
        }

        tags[id] = {
          name: name,
          type: type,
          lineno: line,
          parent: ast,
          child: child,
          id: id
        };
      }
    });
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,